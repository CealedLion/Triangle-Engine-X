/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Standard Triangle Engine X Graphics API.

* draws 2d & 3d graphics :D

SPECIFICATION:

 * set "TEX_EXPOSE_VULKAN" define to expose native vulkan if you are into that. 

 * Utils can be imported. Graphics::Utils

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
#pragma once

#define TEX_GRAPHICS_API

#include <cglm/cglm.h>
#ifdef TEX_EXPOSE_GRAPHICS
#include <vulkan/vulkan.h>
#include <vulkan/spirv.h>
#endif

/*
* Added in 1.0.0
* Redefine of VkFormat.
*/
typedef enum GraphicsFormat{
	GraphicsFormat_Undefined = 0,
	GraphicsFormat_R4G4_UNORM_PACK8 = 1,
	GraphicsFormat_R4G4B4A4_UNORM_PACK16 = 2,
	GraphicsFormat_B4G4R4A4_UNORM_PACK16 = 3,
	GraphicsFormat_R5G6B5_UNORM_PACK16 = 4,
	GraphicsFormat_B5G6R5_UNORM_PACK16 = 5,
	GraphicsFormat_R5G5B5A1_UNORM_PACK16 = 6,
	GraphicsFormat_B5G5R5A1_UNORM_PACK16 = 7,
	GraphicsFormat_A1R5G5B5_UNORM_PACK16 = 8,
	GraphicsFormat_R8_UNORM = 9,
	GraphicsFormat_R8_SNORM = 10,
	GraphicsFormat_R8_USCALED = 11,
	GraphicsFormat_R8_SSCALED = 12,
	GraphicsFormat_R8_UINT = 13,
	GraphicsFormat_R8_SINT = 14,
	GraphicsFormat_R8_SRGB = 15,
	GraphicsFormat_R8G8_UNORM = 16,
	GraphicsFormat_R8G8_SNORM = 17,
	GraphicsFormat_R8G8_USCALED = 18,
	GraphicsFormat_R8G8_SSCALED = 19,
	GraphicsFormat_R8G8_UINT = 20,
	GraphicsFormat_R8G8_SINT = 21,
	GraphicsFormat_R8G8_SRGB = 22,
	GraphicsFormat_R8G8B8_UNORM = 23,
	GraphicsFormat_R8G8B8_SNORM = 24,
	GraphicsFormat_R8G8B8_USCALED = 25,
	GraphicsFormat_R8G8B8_SSCALED = 26,
	GraphicsFormat_R8G8B8_UINT = 27,
	GraphicsFormat_R8G8B8_SINT = 28,
	GraphicsFormat_R8G8B8_SRGB = 29,
	GraphicsFormat_B8G8R8_UNORM = 30,
	GraphicsFormat_B8G8R8_SNORM = 31,
	GraphicsFormat_B8G8R8_USCALED = 32,
	GraphicsFormat_B8G8R8_SSCALED = 33,
	GraphicsFormat_B8G8R8_UINT = 34,
	GraphicsFormat_B8G8R8_SINT = 35,
	GraphicsFormat_B8G8R8_SRGB = 36,
	GraphicsFormat_R8G8B8A8_UNORM = 37,
	GraphicsFormat_R8G8B8A8_SNORM = 38,
	GraphicsFormat_R8G8B8A8_USCALED = 39,
	GraphicsFormat_R8G8B8A8_SSCALED = 40,
	GraphicsFormat_R8G8B8A8_UINT = 41,
	GraphicsFormat_R8G8B8A8_SINT = 42,
	GraphicsFormat_R8G8B8A8_SRGB = 43,
	GraphicsFormat_B8G8R8A8_UNORM = 44,
	GraphicsFormat_B8G8R8A8_SNORM = 45,
	GraphicsFormat_B8G8R8A8_USCALED = 46,
	GraphicsFormat_B8G8R8A8_SSCALED = 47,
	GraphicsFormat_B8G8R8A8_UINT = 48,
	GraphicsFormat_B8G8R8A8_SINT = 49,
	GraphicsFormat_B8G8R8A8_SRGB = 50,
	GraphicsFormat_A8B8G8R8_UNORM_PACK32 = 51,
	GraphicsFormat_A8B8G8R8_SNORM_PACK32 = 52,
	GraphicsFormat_A8B8G8R8_USCALED_PACK32 = 53,
	GraphicsFormat_A8B8G8R8_SSCALED_PACK32 = 54,
	GraphicsFormat_A8B8G8R8_UINT_PACK32 = 55,
	GraphicsFormat_A8B8G8R8_SINT_PACK32 = 56,
	GraphicsFormat_A8B8G8R8_SRGB_PACK32 = 57,
	GraphicsFormat_A2R10G10B10_UNORM_PACK32 = 58,
	GraphicsFormat_A2R10G10B10_SNORM_PACK32 = 59,
	GraphicsFormat_A2R10G10B10_USCALED_PACK32 = 60,
	GraphicsFormat_A2R10G10B10_SSCALED_PACK32 = 61,
	GraphicsFormat_A2R10G10B10_UINT_PACK32 = 62,
	GraphicsFormat_A2R10G10B10_SINT_PACK32 = 63,
	GraphicsFormat_A2B10G10R10_UNORM_PACK32 = 64,
	GraphicsFormat_A2B10G10R10_SNORM_PACK32 = 65,
	GraphicsFormat_A2B10G10R10_USCALED_PACK32 = 66,
	GraphicsFormat_A2B10G10R10_SSCALED_PACK32 = 67,
	GraphicsFormat_A2B10G10R10_UINT_PACK32 = 68,
	GraphicsFormat_A2B10G10R10_SINT_PACK32 = 69,
	GraphicsFormat_R16_UNORM = 70,
	GraphicsFormat_R16_SNORM = 71,
	GraphicsFormat_R16_USCALED = 72,
	GraphicsFormat_R16_SSCALED = 73,
	GraphicsFormat_R16_UINT = 74,
	GraphicsFormat_R16_SINT = 75,
	GraphicsFormat_R16_SFLOAT = 76,
	GraphicsFormat_R16G16_UNORM = 77,
	GraphicsFormat_R16G16_SNORM = 78,
	GraphicsFormat_R16G16_USCALED = 79,
	GraphicsFormat_R16G16_SSCALED = 80,
	GraphicsFormat_R16G16_UINT = 81,
	GraphicsFormat_R16G16_SINT = 82,
	GraphicsFormat_R16G16_SFLOAT = 83,
	GraphicsFormat_R16G16B16_UNORM = 84,
	GraphicsFormat_R16G16B16_SNORM = 85,
	GraphicsFormat_R16G16B16_USCALED = 86,
	GraphicsFormat_R16G16B16_SSCALED = 87,
	GraphicsFormat_R16G16B16_UINT = 88,
	GraphicsFormat_R16G16B16_SINT = 89,
	GraphicsFormat_R16G16B16_SFLOAT = 90,
	GraphicsFormat_R16G16B16A16_UNORM = 91,
	GraphicsFormat_R16G16B16A16_SNORM = 92,
	GraphicsFormat_R16G16B16A16_USCALED = 93,
	GraphicsFormat_R16G16B16A16_SSCALED = 94,
	GraphicsFormat_R16G16B16A16_UINT = 95,
	GraphicsFormat_R16G16B16A16_SINT = 96,
	GraphicsFormat_R16G16B16A16_SFLOAT = 97,
	GraphicsFormat_R32_UINT = 98,
	GraphicsFormat_R32_SINT = 99,
	GraphicsFormat_R32_SFLOAT = 100,
	GraphicsFormat_R32G32_UINT = 101,
	GraphicsFormat_R32G32_SINT = 102,
	GraphicsFormat_R32G32_SFLOAT = 103,
	GraphicsFormat_R32G32B32_UINT = 104,
	GraphicsFormat_R32G32B32_SINT = 105,
	GraphicsFormat_R32G32B32_SFLOAT = 106,
	GraphicsFormat_R32G32B32A32_UINT = 107,
	GraphicsFormat_R32G32B32A32_SINT = 108,
	GraphicsFormat_R32G32B32A32_SFLOAT = 109,
	GraphicsFormat_R64_UINT = 110,
	GraphicsFormat_R64_SINT = 111,
	GraphicsFormat_R64_SFLOAT = 112,
	GraphicsFormat_R64G64_UINT = 113,
	GraphicsFormat_R64G64_SINT = 114,
	GraphicsFormat_R64G64_SFLOAT = 115,
	GraphicsFormat_R64G64B64_UINT = 116,
	GraphicsFormat_R64G64B64_SINT = 117,
	GraphicsFormat_R64G64B64_SFLOAT = 118,
	GraphicsFormat_R64G64B64A64_UINT = 119,
	GraphicsFormat_R64G64B64A64_SINT = 120,
	GraphicsFormat_R64G64B64A64_SFLOAT = 121,
	GraphicsFormat_B10G11R11_UFLOAT_PACK32 = 122,
	GraphicsFormat_E5B9G9R9_UFLOAT_PACK32 = 123,
	GraphicsFormat_D16_UNORM = 124,
	GraphicsFormat_X8_D24_UNORM_PACK32 = 125,
	GraphicsFormat_D32_SFLOAT = 126,
	GraphicsFormat_S8_UINT = 127,
	GraphicsFormat_D16_UNORM_S8_UINT = 128,
	GraphicsFormat_D24_UNORM_S8_UINT = 129,
	GraphicsFormat_D32_SFLOAT_S8_UINT = 130,
	GraphicsFormat_BC1_RGB_UNORM_BLOCK = 131,
	GraphicsFormat_BC1_RGB_SRGB_BLOCK = 132,
	GraphicsFormat_BC1_RGBA_UNORM_BLOCK = 133,
	GraphicsFormat_BC1_RGBA_SRGB_BLOCK = 134,
	GraphicsFormat_BC2_UNORM_BLOCK = 135,
	GraphicsFormat_BC2_SRGB_BLOCK = 136,
	GraphicsFormat_BC3_UNORM_BLOCK = 137,
	GraphicsFormat_BC3_SRGB_BLOCK = 138,
	GraphicsFormat_BC4_UNORM_BLOCK = 139,
	GraphicsFormat_BC4_SNORM_BLOCK = 140,
	GraphicsFormat_BC5_UNORM_BLOCK = 141,
	GraphicsFormat_BC5_SNORM_BLOCK = 142,
	GraphicsFormat_BC6H_UFLOAT_BLOCK = 143,
	GraphicsFormat_BC6H_SFLOAT_BLOCK = 144,
	GraphicsFormat_BC7_UNORM_BLOCK = 145,
	GraphicsFormat_BC7_SRGB_BLOCK = 146,
	GraphicsFormat_ETC2_R8G8B8_UNORM_BLOCK = 147,
	GraphicsFormat_ETC2_R8G8B8_SRGB_BLOCK = 148,
	GraphicsFormat_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	GraphicsFormat_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	GraphicsFormat_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	GraphicsFormat_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	GraphicsFormat_EAC_R11_UNORM_BLOCK = 153,
	GraphicsFormat_EAC_R11_SNORM_BLOCK = 154,
	GraphicsFormat_EAC_R11G11_UNORM_BLOCK = 155,
	GraphicsFormat_EAC_R11G11_SNORM_BLOCK = 156,
	GraphicsFormat_ASTC_4x4_UNORM_BLOCK = 157,
	GraphicsFormat_ASTC_4x4_SRGB_BLOCK = 158,
	GraphicsFormat_ASTC_5x4_UNORM_BLOCK = 159,
	GraphicsFormat_ASTC_5x4_SRGB_BLOCK = 160,
	GraphicsFormat_ASTC_5x5_UNORM_BLOCK = 161,
	GraphicsFormat_ASTC_5x5_SRGB_BLOCK = 162,
	GraphicsFormat_ASTC_6x5_UNORM_BLOCK = 163,
	GraphicsFormat_ASTC_6x5_SRGB_BLOCK = 164,
	GraphicsFormat_ASTC_6x6_UNORM_BLOCK = 165,
	GraphicsFormat_ASTC_6x6_SRGB_BLOCK = 166,
	GraphicsFormat_ASTC_8x5_UNORM_BLOCK = 167,
	GraphicsFormat_ASTC_8x5_SRGB_BLOCK = 168,
	GraphicsFormat_ASTC_8x6_UNORM_BLOCK = 169,
	GraphicsFormat_ASTC_8x6_SRGB_BLOCK = 170,
	GraphicsFormat_ASTC_8x8_UNORM_BLOCK = 171,
	GraphicsFormat_ASTC_8x8_SRGB_BLOCK = 172,
	GraphicsFormat_ASTC_10x5_UNORM_BLOCK = 173,
	GraphicsFormat_ASTC_10x5_SRGB_BLOCK = 174,
	GraphicsFormat_ASTC_10x6_UNORM_BLOCK = 175,
	GraphicsFormat_ASTC_10x6_SRGB_BLOCK = 176,
	GraphicsFormat_ASTC_10x8_UNORM_BLOCK = 177,
	GraphicsFormat_ASTC_10x8_SRGB_BLOCK = 178,
	GraphicsFormat_ASTC_10x10_UNORM_BLOCK = 179,
	GraphicsFormat_ASTC_10x10_SRGB_BLOCK = 180,
	GraphicsFormat_ASTC_12x10_UNORM_BLOCK = 181,
	GraphicsFormat_ASTC_12x10_SRGB_BLOCK = 182,
	GraphicsFormat_ASTC_12x12_UNORM_BLOCK = 183,
	GraphicsFormat_ASTC_12x12_SRGB_BLOCK = 184

}GraphicsFormat;

//define a common set of formats
//https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFormat.html

//amount of bits each channel in format is
//compressed are undefined
const uint8_t GraphicsFormatBitsPerChannels[][4] = {
	{0, 0, 0, 0}, //UNDEFEIND
	{4, 4, 0, 0}, //VK_FORMAT_R4G4_UNORM_PACK8
	{4, 4, 4, 4}, //VK_FORMAT_R4G4B4A4_UNORM_PACK16
	{4, 4, 4, 4}, //VK_FORMAT_B4G4R4A4_UNORM_PACK16
	{5, 6, 5, 0}, //VK_FORMAT_R5G6B5_UNORM_PACK16
	{5, 6, 5, 0}, //VK_FORMAT_B5G6R5_UNORM_PACK16
	{5, 5, 5, 1}, //VK_FORMAT_R5G5B5A1_UNORM_PACK16
	{5, 5, 5, 1}, //VK_FORMAT_B5G5R5A1_UNORM_PACK16
	{1, 5, 5, 5}, //VK_FORMAT_A1R5G5B5_UNORM_PACK16
	{8, 0, 0, 0}, //VK_FORMAT_R8_UNORM
	{8, 0, 0, 0}, //VK_FORMAT_R8_SNORM
	{8, 0, 0, 0}, //VK_FORMAT_R8_USCALED
	{8, 0, 0, 0}, //VK_FORMAT_R8_SSCALED
	{8, 0, 0, 0}, //VK_FORMAT_R8_UINT
	{8, 0, 0, 0}, //VK_FORMAT_R8_SINT
	{8, 0, 0, 0}, //VK_FORMAT_R8_SRGB
	{8, 8, 0, 0}, //VK_FORMAT_R8G8_UNORM = 16,
	{8, 8, 0, 0}, //VK_FORMAT_R8G8_SNORM = 17,
	{8, 8, 0, 0}, //VK_FORMAT_R8G8_USCALED = 18,
	{8, 8, 0, 0}, //VK_FORMAT_R8G8_SSCALED = 19,
	{8, 8, 0, 0}, //VK_FORMAT_R8G8_UINT = 20,
	{8, 8, 0, 0}, //VK_FORMAT_R8G8_SINT = 21,
	{8, 8, 0, 0}, //VK_FORMAT_R8G8_SRGB = 22,
	{8, 8, 8, 0}, //VK_FORMAT_R8G8B8_UNORM = 23,
	{8, 8, 8, 0}, //VK_FORMAT_R8G8B8_SNORM = 24,
	{8, 8, 8, 0}, //VK_FORMAT_R8G8B8_USCALED = 25,
	{8, 8, 8, 0}, //VK_FORMAT_R8G8B8_SSCALED = 26,
	{8, 8, 8, 0}, //VK_FORMAT_R8G8B8_UINT = 27,
	{8, 8, 8, 0}, //VK_FORMAT_R8G8B8_SINT = 28,
	{8, 8, 8, 0}, //VK_FORMAT_R8G8B8_SRGB = 29,
	{8, 8, 8, 0}, //VK_FORMAT_B8G8R8_UNORM = 30,
	{8, 8, 8, 0}, //VK_FORMAT_B8G8R8_SNORM = 31,
	{8, 8, 8, 0}, //VK_FORMAT_B8G8R8_USCALED = 32,
	{8, 8, 8, 0}, //VK_FORMAT_B8G8R8_SSCALED = 33,
	{8, 8, 8, 0}, //VK_FORMAT_B8G8R8_UINT = 34,
	{8, 8, 8, 0}, //VK_FORMAT_B8G8R8_SINT = 35,
	{8, 8, 8, 0}, //VK_FORMAT_B8G8R8_SRGB = 36,
	{8, 8, 8, 8}, //VK_FORMAT_R8G8B8A8_UNORM = 37,
	{8, 8, 8, 8}, //VK_FORMAT_R8G8B8A8_SNORM = 38,
	{8, 8, 8, 8}, //VK_FORMAT_R8G8B8A8_USCALED = 39,
	{8, 8, 8, 8}, //VK_FORMAT_R8G8B8A8_SSCALED = 40,
	{8, 8, 8, 8}, //VK_FORMAT_R8G8B8A8_UINT = 41,
	{8, 8, 8, 8}, //VK_FORMAT_R8G8B8A8_SINT = 42,
	{8, 8, 8, 8}, //VK_FORMAT_R8G8B8A8_SRGB = 43,
	{8, 8, 8, 8}, //VK_FORMAT_B8G8R8A8_UNORM = 44,
	{8, 8, 8, 8}, //VK_FORMAT_B8G8R8A8_SNORM = 45,
	{8, 8, 8, 8}, //VK_FORMAT_B8G8R8A8_USCALED = 46,
	{8, 8, 8, 8}, //VK_FORMAT_B8G8R8A8_SSCALED = 47,
	{8, 8, 8, 8}, //VK_FORMAT_B8G8R8A8_UINT = 48,
	{8, 8, 8, 8}, //VK_FORMAT_B8G8R8A8_SINT = 49,
	{8, 8, 8, 8}, //VK_FORMAT_B8G8R8A8_SRGB = 50,
	{8, 8, 8, 8}, //VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	{8, 8, 8, 8}, //VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	{8, 8, 8, 8}, //VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	{8, 8, 8, 8}, //VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	{8, 8, 8, 8}, //VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	{8, 8, 8, 8}, //VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	{8, 8, 8, 8}, //VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	{2, 10, 10, 10}, //VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	{2, 10, 10, 10}, //VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	{2, 10, 10, 10}, //VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	{2, 10, 10, 10}, //VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	{2, 10, 10, 10}, //VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	{2, 10, 10, 10}, //VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	{2, 10, 10, 10}, //VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	{2, 10, 10, 10}, //VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	{2, 10, 10, 10}, //VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	{2, 10, 10, 10}, //VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	{2, 10, 10, 10}, //VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	{2, 10, 10, 10}, //VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	{16, 0, 0, 0}, //VK_FORMAT_R16_UNORM = 70,
	{16, 0, 0, 0}, //VK_FORMAT_R16_SNORM = 71,
	{16, 0, 0, 0}, //VK_FORMAT_R16_USCALED = 72,
	{16, 0, 0, 0}, //VK_FORMAT_R16_SSCALED = 73,
	{16, 0, 0, 0}, //VK_FORMAT_R16_UINT = 74,
	{16, 0, 0, 0}, //VK_FORMAT_R16_SINT = 75,
	{16, 0, 0, 0}, //VK_FORMAT_R16_SFLOAT = 76,
	{16, 16, 0, 0}, //VK_FORMAT_R16G16_UNORM = 77,
	{16, 16, 0, 0}, //VK_FORMAT_R16G16_SNORM = 78,
	{16, 16, 0, 0}, //VK_FORMAT_R16G16_USCALED = 79,
	{16, 16, 0, 0}, //VK_FORMAT_R16G16_SSCALED = 80,
	{16, 16, 0, 0}, //VK_FORMAT_R16G16_UINT = 81,
	{16, 16, 0, 0}, //VK_FORMAT_R16G16_SINT = 82,
	{16, 16, 0, 0}, //VK_FORMAT_R16G16_SFLOAT = 83,
	{16, 16, 16, 0}, //VK_FORMAT_R16G16B16_UNORM = 84,
	{16, 16, 16, 0}, //VK_FORMAT_R16G16B16_SNORM = 85,
	{16, 16, 16, 0}, //VK_FORMAT_R16G16B16_USCALED = 86,
	{16, 16, 16, 0}, //VK_FORMAT_R16G16B16_SSCALED = 87,
	{16, 16, 16, 0}, //VK_FORMAT_R16G16B16_UINT = 88,
	{16, 16, 16, 0}, //VK_FORMAT_R16G16B16_SINT = 89,
	{16, 16, 16, 0}, //VK_FORMAT_R16G16B16_SFLOAT = 90,
	{16, 16, 16, 16}, //VK_FORMAT_R16G16B16A16_UNORM = 91,
	{16, 16, 16, 16}, //VK_FORMAT_R16G16B16A16_SNORM = 92,
	{16, 16, 16, 16}, //VK_FORMAT_R16G16B16A16_USCALED = 93,
	{16, 16, 16, 16}, //VK_FORMAT_R16G16B16A16_SSCALED = 94,
	{16, 16, 16, 16}, //VK_FORMAT_R16G16B16A16_UINT = 95,
	{16, 16, 16, 16}, //VK_FORMAT_R16G16B16A16_SINT = 96,
	{16, 16, 16, 16}, //VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	{32, 0, 0, 0}, //VK_FORMAT_R32_UINT = 98,
	{32, 0, 0, 0}, //VK_FORMAT_R32_SINT = 99,
	{32, 0, 0, 0 }, //VK_FORMAT_R32_SFLOAT = 100,
	{32, 32, 0, 0 }, //VK_FORMAT_R32G32_UINT = 101,
	{32, 32, 0, 0 }, //VK_FORMAT_R32G32_SINT = 102,
	{32, 32, 0, 0 }, //VK_FORMAT_R32G32_SFLOAT = 103,
	{32, 32, 32, 0 }, //VK_FORMAT_R32G32B32_UINT = 104,
	{32, 32, 32, 0 }, //VK_FORMAT_R32G32B32_SINT = 105,
	{32, 32, 32, 0 }, //VK_FORMAT_R32G32B32_SFLOAT = 106,
	{32, 32, 32, 32 }, //VK_FORMAT_R32G32B32A32_UINT = 107,
	{32, 32, 32, 32 }, //VK_FORMAT_R32G32B32A32_SINT = 108,
	{32, 32, 32, 32 }, //VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	{64, 0, 0, 0 }, //VK_FORMAT_R64_UINT = 110,
	{64, 0, 0, 0 }, //VK_FORMAT_R64_SINT = 111,
	{64, 0, 0, 0 }, //VK_FORMAT_R64_SFLOAT = 112,
	{64, 64, 0, 0 }, //VK_FORMAT_R64G64_UINT = 113,
	{64, 64, 0, 0 }, //VK_FORMAT_R64G64_SINT = 114,
	{64, 64, 0, 0 }, //VK_FORMAT_R64G64_SFLOAT = 115,
	{64, 64, 64, 0 }, //VK_FORMAT_R64G64B64_UINT = 116,
	{64, 64, 64, 0 }, //VK_FORMAT_R64G64B64_SINT = 117,
	{64, 64, 64, 0 }, //VK_FORMAT_R64G64B64_SFLOAT = 118,
	{64, 64, 64, 64 }, //VK_FORMAT_R64G64B64A64_UINT = 119,
	{64, 64, 64, 64 }, //VK_FORMAT_R64G64B64A64_SINT = 120,
	{64, 64, 64, 64 }, //VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	{10, 11, 11, 0 }, //VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	{5, 9, 9, 9 },	//VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	{16, 0, 0, 0 }, //VK_FORMAT_D16_UNORM = 124,
	{8, 24, 0, 0 }, //VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	{32, 0, 0, 0 }, //VK_FORMAT_D32_SFLOAT = 126,
	{8, 0, 0, 0 }, //VK_FORMAT_S8_UINT = 127,
	{16, 8, 0, 0 }, //VK_FORMAT_D16_UNORM_S8_UINT = 128,
	{24, 8, 0, 0 }, //VK_FORMAT_D24_UNORM_S8_UINT = 129,
	{32, 8, 0, 0 }, //VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
	{64, 0, 0, 0 }, //VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	{64, 0, 0, 0 }, //VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	{64, 0, 0, 0 }, //VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	{64, 0, 0, 0 }, //VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
	{128, 0, 0, 0 }, //VK_FORMAT_BC2_UNORM_BLOCK = 135,
	{128, 0, 0, 0 }, //VK_FORMAT_BC2_SRGB_BLOCK = 136,
	{128, 0, 0, 0 }, //VK_FORMAT_BC3_UNORM_BLOCK = 137,
	{128, 0, 0, 0 }, //VK_FORMAT_BC3_SRGB_BLOCK = 138,
	{64, 0, 0, 0 }, //VK_FORMAT_BC4_UNORM_BLOCK = 139,
	{64, 0, 0, 0 }, //VK_FORMAT_BC4_SNORM_BLOCK = 140,
	{128, 0, 0, 0 }, //VK_FORMAT_BC5_UNORM_BLOCK = 141,
	{128, 0, 0, 0 }, //VK_FORMAT_BC5_SNORM_BLOCK = 142,
	{128, 0, 0, 0 }, //VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	{128, 0, 0, 0 }, //VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	{128, 0, 0, 0 }, //VK_FORMAT_BC7_UNORM_BLOCK = 145,
	{128, 0, 0, 0 }, //VK_FORMAT_BC7_SRGB_BLOCK = 146,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	{128, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	{128, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	{64, 0, 0, 0 }, //VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	{64, 0, 0, 0 }, //VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	{128, 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	{128, 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
};
//ChannelIndentifiers format has
const char GraphicsFormatChannelIndentifiers[][4] = {
	{0, 0, 0, 0}, //UNDEFEIND
	{'R', 'G', 0, 0}, //VK_FORMAT_R4G4_UNORM_PACK8
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R4G4B4A4_UNORM_PACK16
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B4G4R4A4_UNORM_PACK16
	{'R', 'G', 'B', 0}, //VK_FORMAT_R5G6B5_UNORM_PACK16
	{'B', 'G', 'R', 0}, //VK_FORMAT_B5G6R5_UNORM_PACK16
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R5G5B5A1_UNORM_PACK16
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B5G5R5A1_UNORM_PACK16
	{'A', 'R', 'G', 'B'}, //VK_FORMAT_A1R5G5B5_UNORM_PACK16
	{'R', 0, 0, 0}, //VK_FORMAT_R8_UNORM
	{'R', 0, 0, 0}, //VK_FORMAT_R8_SNORM
	{'R', 0, 0, 0}, //VK_FORMAT_R8_USCALED
	{'R', 0, 0, 0}, //VK_FORMAT_R8_SSCALED
	{'R', 0, 0, 0}, //VK_FORMAT_R8_UINT
	{'R', 0, 0, 0}, //VK_FORMAT_R8_SINT
	{'R', 0, 0, 0}, //VK_FORMAT_R8_SRGB
	{'R', 'G', 0, 0}, //VK_FORMAT_R8G8_UNORM = 16,
	{'R', 'G', 0, 0}, //VK_FORMAT_R8G8_SNORM = 17,
	{'R', 'G', 0, 0}, //VK_FORMAT_R8G8_USCALED = 18,
	{'R', 'G', 0, 0}, //VK_FORMAT_R8G8_SSCALED = 19,
	{'R', 'G', 0, 0}, //VK_FORMAT_R8G8_UINT = 20,
	{'R', 'G', 0, 0}, //VK_FORMAT_R8G8_SINT = 21,
	{'R', 'G', 0, 0}, //VK_FORMAT_R8G8_SRGB = 22,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R8G8B8_UNORM = 23,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R8G8B8_SNORM = 24,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R8G8B8_USCALED = 25,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R8G8B8_SSCALED = 26,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R8G8B8_UINT = 27,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R8G8B8_SINT = 28,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R8G8B8_SRGB = 29,
	{'B', 'G', 'R', 0}, //VK_FORMAT_B8G8R8_UNORM = 30,
	{'B', 'G', 'R', 0}, //VK_FORMAT_B8G8R8_SNORM = 31,
	{'B', 'G', 'R', 0}, //VK_FORMAT_B8G8R8_USCALED = 32,
	{'B', 'G', 'R', 0}, //VK_FORMAT_B8G8R8_SSCALED = 33,
	{'B', 'G', 'R', 0}, //VK_FORMAT_B8G8R8_UINT = 34,
	{'B', 'G', 'R', 0}, //VK_FORMAT_B8G8R8_SINT = 35,
	{'B', 'G', 'R', 0}, //VK_FORMAT_B8G8R8_SRGB = 36,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R8G8B8A8_UNORM = 37,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R8G8B8A8_SNORM = 38,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R8G8B8A8_USCALED = 39,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R8G8B8A8_SSCALED = 40,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R8G8B8A8_UINT = 41,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R8G8B8A8_SINT = 42,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R8G8B8A8_SRGB = 43,
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B8G8R8A8_UNORM = 44,
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B8G8R8A8_SNORM = 45,
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B8G8R8A8_USCALED = 46,
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B8G8R8A8_SSCALED = 47,
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B8G8R8A8_UINT = 48,
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B8G8R8A8_SINT = 49,
	{'B', 'G', 'R', 'A'}, //VK_FORMAT_B8G8R8A8_SRGB = 50,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	{'A', 'R', 'G', 'B'}, //VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	{'A', 'R', 'G', 'B'}, //VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	{'A', 'R', 'G', 'B'}, //VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	{'A', 'R', 'G', 'B'}, //VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	{'A', 'R', 'G', 'B'}, //VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	{'A', 'R', 'G', 'B'}, //VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	{'A', 'B', 'G', 'R'}, //VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	{'R', 0, 0, 0}, //VK_FORMAT_R16_UNORM = 70,
	{'R', 0, 0, 0}, //VK_FORMAT_R16_SNORM = 71,
	{'R', 0, 0, 0}, //VK_FORMAT_R16_USCALED = 72,
	{'R', 0, 0, 0}, //VK_FORMAT_R16_SSCALED = 73,
	{'R', 0, 0, 0}, //VK_FORMAT_R16_UINT = 74,
	{'R', 0, 0, 0}, //VK_FORMAT_R16_SINT = 75,
	{'R', 0, 0, 0}, //VK_FORMAT_R16_SFLOAT = 76,
	{'R', 'G', 0, 0}, //VK_FORMAT_R16G16_UNORM = 77,
	{'R', 'G', 0, 0}, //VK_FORMAT_R16G16_SNORM = 78,
	{'R', 'G', 0, 0}, //VK_FORMAT_R16G16_USCALED = 79,
	{'R', 'G', 0, 0}, //VK_FORMAT_R16G16_SSCALED = 80,
	{'R', 'G', 0, 0}, //VK_FORMAT_R16G16_UINT = 81,
	{'R', 'G', 0, 0}, //VK_FORMAT_R16G16_SINT = 82,
	{'R', 'G', 0, 0}, //VK_FORMAT_R16G16_SFLOAT = 83,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R16G16B16_UNORM = 84,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R16G16B16_SNORM = 85,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R16G16B16_USCALED = 86,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R16G16B16_SSCALED = 87,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R16G16B16_UINT = 88,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R16G16B16_SINT = 89,
	{'R', 'G', 'B', 0}, //VK_FORMAT_R16G16B16_SFLOAT = 90,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R16G16B16A16_UNORM = 91,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R16G16B16A16_SNORM = 92,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R16G16B16A16_USCALED = 93,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R16G16B16A16_SSCALED = 94,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R16G16B16A16_UINT = 95,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R16G16B16A16_SINT = 96,
	{'R', 'G', 'B', 'A'}, //VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	{'R', 0, 0, 0}, //VK_FORMAT_R32_UINT = 98,
	{'R', 0, 0, 0}, //VK_FORMAT_R32_SINT = 99,
	{'R', 0, 0, 0 }, //VK_FORMAT_R32_SFLOAT = 100,
	{'R', 'G', 0, 0 }, //VK_FORMAT_R32G32_UINT = 101,
	{'R', 'G', 0, 0 }, //VK_FORMAT_R32G32_SINT = 102,
	{'R', 'G', 0, 0 }, //VK_FORMAT_R32G32_SFLOAT = 103,
	{'R', 'G', 'B', 0 }, //VK_FORMAT_R32G32B32_UINT = 104,
	{'R', 'G', 'B', 0 }, //VK_FORMAT_R32G32B32_SINT = 105,
	{'R', 'G', 'B', 0 }, //VK_FORMAT_R32G32B32_SFLOAT = 106,
	{'R', 'G', 'B', 'A' }, //VK_FORMAT_R32G32B32A32_UINT = 107,
	{'R', 'G', 'B', 'A' }, //VK_FORMAT_R32G32B32A32_SINT = 108,
	{'R', 'G', 'B', 'A' }, //VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	{'R', 0, 0, 0 }, //VK_FORMAT_R64_UINT = 110,
	{'R', 0, 0, 0 }, //VK_FORMAT_R64_SINT = 111,
	{'R', 0, 0, 0 }, //VK_FORMAT_R64_SFLOAT = 112,
	{'R', 'G', 0, 0 }, //VK_FORMAT_R64G64_UINT = 113,
	{'R', 'G', 0, 0 }, //VK_FORMAT_R64G64_SINT = 114,
	{'R', 'G', 0, 0 }, //VK_FORMAT_R64G64_SFLOAT = 115,
	{'R', 'G', 'B', 0 }, //VK_FORMAT_R64G64B64_UINT = 116,
	{'R', 'G', 'B', 0 }, //VK_FORMAT_R64G64B64_SINT = 117,
	{'R', 'G', 'B', 0 }, //VK_FORMAT_R64G64B64_SFLOAT = 118,
	{'R', 'G', 'B', 'A' }, //VK_FORMAT_R64G64B64A64_UINT = 119,
	{'R', 'G', 'B', 'A' }, //VK_FORMAT_R64G64B64A64_SINT = 120,
	{'R', 'G', 'B', 'A' }, //VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	{'B', 'G', 'R', 0 }, //VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	{'E', 'B', 'G', 'R' },	//VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	{'D', 0, 0, 0 }, //VK_FORMAT_D16_UNORM = 124,
	{'X', 'D', 0, 0 }, //VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	{'D', 0, 0, 0 }, //VK_FORMAT_D32_SFLOAT = 126,
	{'S', 0, 0, 0 }, //VK_FORMAT_S8_UINT = 127,
	{'D', 'S', 0, 0 }, //VK_FORMAT_D16_UNORM_S8_UINT = 128,
	{'D', 'S', 0, 0 }, //VK_FORMAT_D24_UNORM_S8_UINT = 129,
	{'D', 'S', 0, 0 }, //VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC2_UNORM_BLOCK = 135,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC2_SRGB_BLOCK = 136,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC3_UNORM_BLOCK = 137,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC3_SRGB_BLOCK = 138,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC4_UNORM_BLOCK = 139,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC4_SNORM_BLOCK = 140,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC5_UNORM_BLOCK = 141,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC5_SNORM_BLOCK = 142,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC7_UNORM_BLOCK = 145,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC7_SRGB_BLOCK = 146,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
};
//amount of bit stride each format has
const uint8_t GraphicsFormatStrides[] = {

	0, //UNDEFEIND
	8, //VK_FORMAT_R4G4_UNORM_PACK8
	16, //VK_FORMAT_R4G4B4A4_UNORM_PACK16
	16, //VK_FORMAT_B4G4R4A4_UNORM_PACK16
	16, //VK_FORMAT_R5G6B5_UNORM_PACK16
	16, //VK_FORMAT_B5G6R5_UNORM_PACK16
	16, //VK_FORMAT_R5G5B5A1_UNORM_PACK16
	16, //VK_FORMAT_B5G5R5A1_UNORM_PACK16
	16, //VK_FORMAT_A1R5G5B5_UNORM_PACK16
	8, //VK_FORMAT_R8_UNORM
	8, //VK_FORMAT_R8_SNORM
	8, //VK_FORMAT_R8_USCALED
	8, //VK_FORMAT_R8_SSCALED
	8, //VK_FORMAT_R8_UINT
	8, //VK_FORMAT_R8_SINT
	8, //VK_FORMAT_R8_SRGB
	16, //VK_FORMAT_R8G8_UNORM = 16,
	16, //VK_FORMAT_R8G8_SNORM = 17,
	16, //VK_FORMAT_R8G8_USCALED = 18,
	16, //VK_FORMAT_R8G8_SSCALED = 19,
	16, //VK_FORMAT_R8G8_UINT = 20,
	16, //VK_FORMAT_R8G8_SINT = 21,
	16, //VK_FORMAT_R8G8_SRGB = 22,
	24, //VK_FORMAT_R8G8B8_UNORM = 23,
	24, //VK_FORMAT_R8G8B8_SNORM = 24,
	24, //VK_FORMAT_R8G8B8_USCALED = 25,
	24, //VK_FORMAT_R8G8B8_SSCALED = 26,
	24, //VK_FORMAT_R8G8B8_UINT = 27,
	24, //VK_FORMAT_R8G8B8_SINT = 28,
	24, //VK_FORMAT_R8G8B8_SRGB = 29,
	24, //VK_FORMAT_B8G8R8_UNORM = 30,
	24, //VK_FORMAT_B8G8R8_SNORM = 31,
	24, //VK_FORMAT_B8G8R8_USCALED = 32,
	24, //VK_FORMAT_B8G8R8_SSCALED = 33,
	24, //VK_FORMAT_B8G8R8_UINT = 34,
	24, //VK_FORMAT_B8G8R8_SINT = 35,
	24, //VK_FORMAT_B8G8R8_SRGB = 36,
	32, //VK_FORMAT_R8G8B8A8_UNORM = 37,
	32, //VK_FORMAT_R8G8B8A8_SNORM = 38,
	32, //VK_FORMAT_R8G8B8A8_USCALED = 39,
	32, //VK_FORMAT_R8G8B8A8_SSCALED = 40,
	32, //VK_FORMAT_R8G8B8A8_UINT = 41,
	32, //VK_FORMAT_R8G8B8A8_SINT = 42,
	32, //VK_FORMAT_R8G8B8A8_SRGB = 43,
	32, //VK_FORMAT_B8G8R8A8_UNORM = 44,
	32, //VK_FORMAT_B8G8R8A8_SNORM = 45,
	32, //VK_FORMAT_B8G8R8A8_USCALED = 46,
	32, //VK_FORMAT_B8G8R8A8_SSCALED = 47,
	32, //VK_FORMAT_B8G8R8A8_UINT = 48,
	32, //VK_FORMAT_B8G8R8A8_SINT = 49,
	32, //VK_FORMAT_B8G8R8A8_SRGB = 50,
	32, //VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	32, //VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	32, //VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	32, //VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	32, //VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	32, //VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	32, //VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	32, //VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	32, //VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	32, //VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	32, //VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	32, //VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	32, //VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	32, //VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	32, //VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	32, //VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	32, //VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	32, //VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	32, //VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	16, //VK_FORMAT_R16_UNORM = 70,
	16, //VK_FORMAT_R16_SNORM = 71,
	16, //VK_FORMAT_R16_USCALED = 72,
	16, //VK_FORMAT_R16_SSCALED = 73,
	16, //VK_FORMAT_R16_UINT = 74,
	16, //VK_FORMAT_R16_SINT = 75,
	16, //VK_FORMAT_R16_SFLOAT = 76,
	32, //VK_FORMAT_R16G16_UNORM = 77,
	32, //VK_FORMAT_R16G16_SNORM = 78,
	32, //VK_FORMAT_R16G16_USCALED = 79,
	32, //VK_FORMAT_R16G16_SSCALED = 80,
	32, //VK_FORMAT_R16G16_UINT = 81,
	32, //VK_FORMAT_R16G16_SINT = 82,
	32, //VK_FORMAT_R16G16_SFLOAT = 83,
	48, //VK_FORMAT_R16G16B16_UNORM = 84,
	48, //VK_FORMAT_R16G16B16_SNORM = 85,
	48, //VK_FORMAT_R16G16B16_USCALED = 86,
	48, //VK_FORMAT_R16G16B16_SSCALED = 87,
	48, //VK_FORMAT_R16G16B16_UINT = 88,
	48, //VK_FORMAT_R16G16B16_SINT = 89,
	48, //VK_FORMAT_R16G16B16_SFLOAT = 90,
	64, //VK_FORMAT_R16G16B16A16_UNORM = 91,
	64, //VK_FORMAT_R16G16B16A16_SNORM = 92,
	64, //VK_FORMAT_R16G16B16A16_USCALED = 93,
	64, //VK_FORMAT_R16G16B16A16_SSCALED = 94,
	64, //VK_FORMAT_R16G16B16A16_UINT = 95,
	64, //VK_FORMAT_R16G16B16A16_SINT = 96,
	64, //VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	32, //VK_FORMAT_R32_UINT = 98,
	32, //VK_FORMAT_R32_SINT = 99,
	32, //VK_FORMAT_R32_SFLOAT = 100,
	64, //VK_FORMAT_R32G32_UINT = 101,
	64, //VK_FORMAT_R32G32_SINT = 102,
	64, //VK_FORMAT_R32G32_SFLOAT = 103,
	96, //VK_FORMAT_R32G32B32_UINT = 104,
	96, //VK_FORMAT_R32G32B32_SINT = 105,
	96, //VK_FORMAT_R32G32B32_SFLOAT = 106,
	128, //VK_FORMAT_R32G32B32A32_UINT = 107,
	128, //VK_FORMAT_R32G32B32A32_SINT = 108,
	128, //VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	64, //VK_FORMAT_R64_UINT = 110,
	64, //VK_FORMAT_R64_SINT = 111,
	64, //VK_FORMAT_R64_SFLOAT = 112,
	128, //VK_FORMAT_R64G64_UINT = 113,
	128, //VK_FORMAT_R64G64_SINT = 114,
	128, //VK_FORMAT_R64G64_SFLOAT = 115,
	192, //VK_FORMAT_R64G64B64_UINT = 116,
	192, //VK_FORMAT_R64G64B64_SINT = 117,
	192, //VK_FORMAT_R64G64B64_SFLOAT = 118,
	256, //VK_FORMAT_R64G64B64A64_UINT = 119,
	256, //VK_FORMAT_R64G64B64A64_SINT = 120,
	256, //VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	32, //VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	32,	//VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	16, //VK_FORMAT_D16_UNORM = 124,
	32, //VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	32, //VK_FORMAT_D32_SFLOAT = 126,
	8, //VK_FORMAT_S8_UINT = 127,
	16, //VK_FORMAT_D16_UNORM_S8_UINT = 128,
	32, //VK_FORMAT_D24_UNORM_S8_UINT = 129,
	40 //VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
		/* invalid as they are compressed
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC2_UNORM_BLOCK = 135,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC2_SRGB_BLOCK = 136,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC3_UNORM_BLOCK = 137,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC3_SRGB_BLOCK = 138,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC4_UNORM_BLOCK = 139,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC4_SNORM_BLOCK = 140,
	{'R', 0, 0, 0 }, //VK_FORMAT_BC5_UNORM_BLOCK = 141,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC5_SNORM_BLOCK = 142,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC7_UNORM_BLOCK = 145,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_BC7_SRGB_BLOCK = 146,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	{ 'R', 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,*/
	/* bullshit
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
*/

};
//amount of components each format has
const uint8_t GraphicsFormatChannelCounts[] = {
	0, //UNDEFEIND
	2, //VK_FORMAT_R4G4_UNORM_PACK8
	4, //VK_FORMAT_R4G4B4A4_UNORM_PACK16
	4, //VK_FORMAT_B4G4R4A4_UNORM_PACK16
	3, //VK_FORMAT_R5G6B5_UNORM_PACK16
	3, //VK_FORMAT_B5G6R5_UNORM_PACK16
	4, //VK_FORMAT_R5G5B5A1_UNORM_PACK16
	4, //VK_FORMAT_B5G5R5A1_UNORM_PACK16
	4, //VK_FORMAT_A1R5G5B5_UNORM_PACK16
	1, //VK_FORMAT_R8_UNORM
	1, //VK_FORMAT_R8_SNORM
	1, //VK_FORMAT_R8_USCALED
	1, //VK_FORMAT_R8_SSCALED
	1, //VK_FORMAT_R8_UINT
	1, //VK_FORMAT_R8_SINT
	1, //VK_FORMAT_R8_SRGB
	2, //VK_FORMAT_R8G8_UNORM = 16,
	2, //VK_FORMAT_R8G8_SNORM = 17,
	2, //VK_FORMAT_R8G8_USCALED = 18,
	2, //VK_FORMAT_R8G8_SSCALED = 19,
	2, //VK_FORMAT_R8G8_UINT = 20,
	2, //VK_FORMAT_R8G8_SINT = 21,
	2, //VK_FORMAT_R8G8_SRGB = 22,
	3, //VK_FORMAT_R8G8B8_UNORM = 23,
	3, //VK_FORMAT_R8G8B8_SNORM = 24,
	3, //VK_FORMAT_R8G8B8_USCALED = 25,
	3, //VK_FORMAT_R8G8B8_SSCALED = 26,
	3, //VK_FORMAT_R8G8B8_UINT = 27,
	3, //VK_FORMAT_R8G8B8_SINT = 28,
	3, //VK_FORMAT_R8G8B8_SRGB = 29,
	3, //VK_FORMAT_B8G8R8_UNORM = 30,
	3, //VK_FORMAT_B8G8R8_SNORM = 31,
	3, //VK_FORMAT_B8G8R8_USCALED = 32,
	3, //VK_FORMAT_B8G8R8_SSCALED = 33,
	3, //VK_FORMAT_B8G8R8_UINT = 34,
	3, //VK_FORMAT_B8G8R8_SINT = 35,
	3, //VK_FORMAT_B8G8R8_SRGB = 36,
	4, //VK_FORMAT_R8G8B8A8_UNORM = 37,
	4, //VK_FORMAT_R8G8B8A8_SNORM = 38,
	4, //VK_FORMAT_R8G8B8A8_USCALED = 39,
	4, //VK_FORMAT_R8G8B8A8_SSCALED = 40,
	4, //VK_FORMAT_R8G8B8A8_UINT = 41,
	4, //VK_FORMAT_R8G8B8A8_SINT = 42,
	4, //VK_FORMAT_R8G8B8A8_SRGB = 43,
	4, //VK_FORMAT_B8G8R8A8_UNORM = 44,
	4, //VK_FORMAT_B8G8R8A8_SNORM = 45,
	4, //VK_FORMAT_B8G8R8A8_USCALED = 46,
	4, //VK_FORMAT_B8G8R8A8_SSCALED = 47,
	4, //VK_FORMAT_B8G8R8A8_UINT = 48,
	4, //VK_FORMAT_B8G8R8A8_SINT = 49,
	4, //VK_FORMAT_B8G8R8A8_SRGB = 50,
	4, //VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	4, //VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	4, //VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	4, //VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	4, //VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	4, //VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	4, //VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	4, //VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	4, //VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	4, //VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	4, //VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	4, //VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	4, //VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	4, //VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	4, //VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	4, //VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	4, //VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	4, //VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	4, //VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	1, //VK_FORMAT_R16_UNORM = 70,
	1, //VK_FORMAT_R16_SNORM = 71,
	1, //VK_FORMAT_R16_USCALED = 72,
	1, //VK_FORMAT_R16_SSCALED = 73,
	1, //VK_FORMAT_R16_UINT = 74,
	1, //VK_FORMAT_R16_SINT = 75,
	1, //VK_FORMAT_R16_SFLOAT = 76,
	2, //VK_FORMAT_R16G16_UNORM = 77,
	2, //VK_FORMAT_R16G16_SNORM = 78,
	2, //VK_FORMAT_R16G16_USCALED = 79,
	2, //VK_FORMAT_R16G16_SSCALED = 80,
	2,//VK_FORMAT_R16G16_UINT = 81,
	2, //VK_FORMAT_R16G16_SINT = 82,
	2, //VK_FORMAT_R16G16_SFLOAT = 83,
	3, //VK_FORMAT_R16G16B16_UNORM = 84,
	3, //VK_FORMAT_R16G16B16_SNORM = 85,
	3, //VK_FORMAT_R16G16B16_USCALED = 86,
	3, //VK_FORMAT_R16G16B16_SSCALED = 87,
	3, //VK_FORMAT_R16G16B16_UINT = 88,
	3, //VK_FORMAT_R16G16B16_SINT = 89,
	3, //VK_FORMAT_R16G16B16_SFLOAT = 90,
	4, //VK_FORMAT_R16G16B16A16_UNORM = 91,
	4, //VK_FORMAT_R16G16B16A16_SNORM = 92,
	4, //VK_FORMAT_R16G16B16A16_USCALED = 93,
	4, //VK_FORMAT_R16G16B16A16_SSCALED = 94,
	4, //VK_FORMAT_R16G16B16A16_UINT = 95,
	4, //VK_FORMAT_R16G16B16A16_SINT = 96,
	4, //VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	1, //VK_FORMAT_R32_UINT = 98,
	1, //VK_FORMAT_R32_SINT = 99,
	1, //VK_FORMAT_R32_SFLOAT = 100,
	2, //VK_FORMAT_R32G32_UINT = 101,
	2, //VK_FORMAT_R32G32_SINT = 102,
	2, //VK_FORMAT_R32G32_SFLOAT = 103,
	3, //VK_FORMAT_R32G32B32_UINT = 104,
	3, //VK_FORMAT_R32G32B32_SINT = 105,
	3, //VK_FORMAT_R32G32B32_SFLOAT = 106,
	4, //VK_FORMAT_R32G32B32A32_UINT = 107,
	4, //VK_FORMAT_R32G32B32A32_SINT = 108,
	4, //VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	1, //VK_FORMAT_R64_UINT = 110,
	1, //VK_FORMAT_R64_SINT = 111,
	1, //VK_FORMAT_R64_SFLOAT = 112,
	2, //VK_FORMAT_R64G64_UINT = 113,
	2, //VK_FORMAT_R64G64_SINT = 114,
	2, //VK_FORMAT_R64G64_SFLOAT = 115,
	3, //VK_FORMAT_R64G64B64_UINT = 116,
	3, //VK_FORMAT_R64G64B64_SINT = 117,
	3, //VK_FORMAT_R64G64B64_SFLOAT = 118,
	4, //VK_FORMAT_R64G64B64A64_UINT = 119,
	4, //VK_FORMAT_R64G64B64A64_SINT = 120,
	4, //VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	3, //VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	4,	//VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	1, //VK_FORMAT_D16_UNORM = 124,
	2, //VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	1, //VK_FORMAT_D32_SFLOAT = 126,
	1, //VK_FORMAT_S8_UINT = 127,
	2, //VK_FORMAT_D16_UNORM_S8_UINT = 128,
	2, //VK_FORMAT_D24_UNORM_S8_UINT = 129,
	2, //VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
	3, //VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	3, //VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	4, //VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	4, //VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
		/*
	{128, 0, 0, 0 }, //VK_FORMAT_BC2_UNORM_BLOCK = 135,
	{128, 0, 0, 0 }, //VK_FORMAT_BC2_SRGB_BLOCK = 136,
	{128, 0, 0, 0 }, //VK_FORMAT_BC3_UNORM_BLOCK = 137,
	{128, 0, 0, 0 }, //VK_FORMAT_BC3_SRGB_BLOCK = 138,
	{64, 0, 0, 0 }, //VK_FORMAT_BC4_UNORM_BLOCK = 139,
	{64, 0, 0, 0 }, //VK_FORMAT_BC4_SNORM_BLOCK = 140,
	{128, 0, 0, 0 }, //VK_FORMAT_BC5_UNORM_BLOCK = 141,
	{128, 0, 0, 0 }, //VK_FORMAT_BC5_SNORM_BLOCK = 142,
	{128, 0, 0, 0 }, //VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	{128, 0, 0, 0 }, //VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	{128, 0, 0, 0 }, //VK_FORMAT_BC7_UNORM_BLOCK = 145,
	{128, 0, 0, 0 }, //VK_FORMAT_BC7_SRGB_BLOCK = 146,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	{128, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	{128, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	{64, 0, 0, 0 }, //VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	{64, 0, 0, 0 }, //VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	{128, 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	{128, 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
	*/
};
//datatype of each vkformat
const DataType GraphicsFormatDataType[][4] = {

	{Undefined, Undefined, Undefined, Undefined}, //UNDEFEIND
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R4G4_UNORM_PACK8
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R4G4B4A4_UNORM_PACK16
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_B4G4R4A4_UNORM_PACK16
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R5G6B5_UNORM_PACK16
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_B5G6R5_UNORM_PACK16
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R5G5B5A1_UNORM_PACK16
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_B5G5R5A1_UNORM_PACK16
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A1R5G5B5_UNORM_PACK16
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R8_UNORM
	{SignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R8_SNORM
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R8_USCALED
	{SignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R8_SSCALED
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R8_UINT
	{SignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R8_SINT
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R8_SRGB
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R8G8_UNORM = 16,
	{SignedInt, SignedInt, Undefined, Undefined}, //VK_FORMAT_R8G8_SNORM = 17,
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R8G8_USCALED = 18,
	{SignedInt, SignedInt, Undefined, Undefined}, //VK_FORMAT_R8G8_SSCALED = 19,
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R8G8_UINT = 20,
	{SignedInt, SignedInt, Undefined, Undefined}, //VK_FORMAT_R8G8_SINT = 21,
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R8G8_SRGB = 22,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R8G8B8_UNORM = 23,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_R8G8B8_SNORM = 24,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R8G8B8_USCALED = 25,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_R8G8B8_SSCALED = 26,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R8G8B8_UINT = 27,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_R8G8B8_SINT = 28,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R8G8B8_SRGB = 29,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_B8G8R8_UNORM = 30,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_B8G8R8_SNORM = 31,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_B8G8R8_USCALED = 32,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_B8G8R8_SSCALED = 33,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_B8G8R8_UINT = 34,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_B8G8R8_SINT = 35,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_B8G8R8_SRGB = 36,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R8G8B8A8_UNORM = 37,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_R8G8B8A8_SNORM = 38,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R8G8B8A8_USCALED = 39,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_R8G8B8A8_SSCALED = 40,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R8G8B8A8_UINT = 41,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_R8G8B8A8_SINT = 42,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R8G8B8A8_SRGB = 43,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_B8G8R8A8_UNORM = 44,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_B8G8R8A8_SNORM = 45,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_B8G8R8A8_USCALED = 46,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_B8G8R8A8_SSCALED = 47,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_B8G8R8A8_UINT = 48,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_B8G8R8A8_SINT = 49,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_B8G8R8A8_SRGB = 50,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R16_UNORM = 70,
	{SignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R16_SNORM = 71,
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R16_USCALED = 72,
	{SignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R16_SSCALED = 73,
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R16_UINT = 74,
	{SignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R16_SINT = 75,
	{SignedFloat, Undefined, Undefined, Undefined}, //VK_FORMAT_R16_SFLOAT = 76,
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R16G16_UNORM = 77,
	{SignedInt, SignedInt, Undefined, Undefined}, //VK_FORMAT_R16G16_SNORM = 78,
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R16G16_USCALED = 79,
	{SignedInt, SignedInt, Undefined, Undefined}, //VK_FORMAT_R16G16_SSCALED = 80,
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R16G16_UINT = 81,
	{SignedInt, SignedInt, Undefined, Undefined}, //VK_FORMAT_R16G16_SINT = 82,
	{SignedFloat, SignedFloat, Undefined, Undefined}, //VK_FORMAT_R16G16_SFLOAT = 83,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R16G16B16_UNORM = 84,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_R16G16B16_SNORM = 85,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R16G16B16_USCALED = 86,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_R16G16B16_SSCALED = 87,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R16G16B16_UINT = 88,
	{SignedInt, SignedInt, SignedInt, Undefined}, //VK_FORMAT_R16G16B16_SINT = 89,
	{SignedFloat, SignedFloat, SignedFloat, Undefined}, //VK_FORMAT_R16G16B16_SFLOAT = 90,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R16G16B16A16_UNORM = 91,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_R16G16B16A16_SNORM = 92,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R16G16B16A16_USCALED = 93,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_R16G16B16A16_SSCALED = 94,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R16G16B16A16_UINT = 95,
	{SignedInt, SignedInt, SignedInt, SignedInt}, //VK_FORMAT_R16G16B16A16_SINT = 96,
	{SignedFloat, SignedFloat, SignedFloat, SignedFloat}, //VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	{UnsignedInt, Undefined, Undefined, Undefined}, //VK_FORMAT_R32_UINT = 98,
	{SignedInt, Undefined, Undefined, Undefined }, //VK_FORMAT_R32_SINT = 99,
	{SignedFloat, Undefined, Undefined, Undefined }, //VK_FORMAT_R32_SFLOAT = 100,
	{ SignedInt, SignedInt, Undefined, Undefined }, //VK_FORMAT_R32G32_UINT = 101,
	{ SignedInt, SignedInt, Undefined, Undefined }, //VK_FORMAT_R32G32_SINT = 102,
	{ SignedFloat, SignedFloat, Undefined, Undefined }, //VK_FORMAT_R32G32_SFLOAT = 103,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R32G32B32_UINT = 104,
	{ SignedInt, SignedInt, SignedInt, Undefined }, //VK_FORMAT_R32G32B32_SINT = 105,
	{ SignedFloat, SignedFloat, SignedFloat, Undefined }, //VK_FORMAT_R32G32B32_SFLOAT = 106,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R32G32B32A32_UINT = 107,
	{ SignedInt, SignedInt, SignedInt, SignedInt }, //VK_FORMAT_R32G32B32A32_SINT = 108,
	{ SignedFloat, SignedFloat, SignedFloat, SignedFloat }, //VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	{UnsignedInt, Undefined, Undefined, Undefined }, //VK_FORMAT_R64_UINT = 110,
	{ SignedInt, Undefined, Undefined, Undefined }, //VK_FORMAT_R64_SINT = 111,
	{ SignedFloat, Undefined, Undefined, Undefined }, //VK_FORMAT_R64_SFLOAT = 112,
	{UnsignedInt, UnsignedInt, Undefined, Undefined}, //VK_FORMAT_R64G64_UINT = 113,
	{ SignedInt, SignedInt, Undefined, Undefined }, //VK_FORMAT_R64G64_SINT = 114,
	{ SignedFloat, SignedFloat, Undefined, Undefined }, //VK_FORMAT_R64G64_SFLOAT = 115,
	{UnsignedInt, UnsignedInt, UnsignedInt, Undefined}, //VK_FORMAT_R64G64B64_UINT = 116,
	{ SignedInt, SignedInt, SignedInt, Undefined }, //VK_FORMAT_R64G64B64_SINT = 117,
	{ SignedFloat, SignedFloat, SignedFloat, Undefined }, //VK_FORMAT_R64G64B64_SFLOAT = 118,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_R64G64B64A64_UINT = 119,
	{ SignedInt, SignedInt, SignedInt, SignedInt }, //VK_FORMAT_R64G64B64A64_SINT = 120,
	{ SignedFloat, SignedFloat, SignedFloat, SignedFloat }, //VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	{ UnsignedFloat, UnsignedFloat, UnsignedFloat, Undefined }, //VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	{ UnsignedFloat, UnsignedFloat, UnsignedFloat, UnsignedFloat },	//VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	{ UnsignedInt, Undefined, Undefined, Undefined }, //VK_FORMAT_D16_UNORM = 124,
	{UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt}, //VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	{ SignedFloat, Undefined, Undefined, Undefined }, //VK_FORMAT_D32_SFLOAT = 126,
	{UnsignedInt, Undefined, Undefined, Undefined }, //VK_FORMAT_S8_UINT = 127,
	{UnsignedInt, UnsignedInt, Undefined, Undefined }, //VK_FORMAT_D16_UNORM_S8_UINT = 128,
	{UnsignedInt, UnsignedInt, Undefined, Undefined }, //VK_FORMAT_D24_UNORM_S8_UINT = 129,
	{SignedFloat, SignedInt, Undefined, Undefined }, //VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
		/*
	{ UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt }, //VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	{64, 0, 0, 0 }, //VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	{ UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt }, //VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	{ UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt }, //VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
	{ UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt }, //VK_FORMAT_BC2_UNORM_BLOCK = 135,
	{ UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt }, //VK_FORMAT_BC2_SRGB_BLOCK = 136,
	{ UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt }, //VK_FORMAT_BC3_UNORM_BLOCK = 137,
	{ UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt }, //VK_FORMAT_BC3_SRGB_BLOCK = 138,
	{64, 0, 0, 0 }, //VK_FORMAT_BC4_UNORM_BLOCK = 139,
	{64, 0, 0, 0 }, //VK_FORMAT_BC4_SNORM_BLOCK = 140,
	{128, 0, 0, 0 }, //VK_FORMAT_BC5_UNORM_BLOCK = 141,
	{128, 0, 0, 0 }, //VK_FORMAT_BC5_SNORM_BLOCK = 142,
	{128, 0, 0, 0 }, //VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	{128, 0, 0, 0 }, //VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	{128, 0, 0, 0 }, //VK_FORMAT_BC7_UNORM_BLOCK = 145,
	{128, 0, 0, 0 }, //VK_FORMAT_BC7_SRGB_BLOCK = 146,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	{64, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	{128, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	{128, 0, 0, 0 }, //VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	{64, 0, 0, 0 }, //VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	{64, 0, 0, 0 }, //VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	{128, 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	{128, 0, 0, 0 }, //VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	{128, 0, 0, 0 }, //VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,*/
};
//string representation of VK formats
const char* VkFormatChars[] = {

	"VK_FORMAT_UNDEFINED",
	"VK_FORMAT_R4G4_UNORM_PACK8",
	"VK_FORMAT_R4G4B4A4_UNORM_PACK16",
	"VK_FORMAT_B4G4R4A4_UNORM_PACK16",
	"VK_FORMAT_R5G6B5_UNORM_PACK16",
	"VK_FORMAT_B5G6R5_UNORM_PACK16",
	"VK_FORMAT_R5G5B5A1_UNORM_PACK16",
	"VK_FORMAT_B5G5R5A1_UNORM_PACK16",
	"VK_FORMAT_A1R5G5B5_UNORM_PACK16",
	"VK_FORMAT_R8_UNORM",
	"VK_FORMAT_R8_SNORM",
	"VK_FORMAT_R8_USCALED",
	"VK_FORMAT_R8_SSCALED",
	"VK_FORMAT_R8_UINT",
	"VK_FORMAT_R8_SINT",
	"VK_FORMAT_R8_SRGB",
	"VK_FORMAT_R8G8_UNORM",
	"VK_FORMAT_R8G8_SNORM",
	"VK_FORMAT_R8G8_USCALED",
	"VK_FORMAT_R8G8_SSCALED",
	"VK_FORMAT_R8G8_UINT",
	"VK_FORMAT_R8G8_SINT",
	"VK_FORMAT_R8G8_SRGB",
	"VK_FORMAT_R8G8B8_UNORM",
	"VK_FORMAT_R8G8B8_SNORM",
	"VK_FORMAT_R8G8B8_USCALED",
	"VK_FORMAT_R8G8B8_SSCALED",
	"VK_FORMAT_R8G8B8_UINT",
	"VK_FORMAT_R8G8B8_SINT",
	"VK_FORMAT_R8G8B8_SRGB",
	"VK_FORMAT_B8G8R8_UNORM",
	"VK_FORMAT_B8G8R8_SNORM",
	"VK_FORMAT_B8G8R8_USCALED",
	"VK_FORMAT_B8G8R8_SSCALED",
	"VK_FORMAT_B8G8R8_UINT",
	"VK_FORMAT_B8G8R8_SINT",
	"VK_FORMAT_B8G8R8_SRGB",
	"VK_FORMAT_R8G8B8A8_UNORM",
	"VK_FORMAT_R8G8B8A8_SNORM",
	"VK_FORMAT_R8G8B8A8_USCALED",
	"VK_FORMAT_R8G8B8A8_SSCALED",
	"VK_FORMAT_R8G8B8A8_UINT",
	"VK_FORMAT_R8G8B8A8_SINT",
	"VK_FORMAT_R8G8B8A8_SRGB",
	"VK_FORMAT_B8G8R8A8_UNORM",
	"VK_FORMAT_B8G8R8A8_SNORM",
	"VK_FORMAT_B8G8R8A8_USCALED",
	"VK_FORMAT_B8G8R8A8_SSCALED",
	"VK_FORMAT_B8G8R8A8_UINT",
	"VK_FORMAT_B8G8R8A8_SINT",
	"VK_FORMAT_B8G8R8A8_SRGB",
	"VK_FORMAT_A8B8G8R8_UNORM_PACK32",
	"VK_FORMAT_A8B8G8R8_SNORM_PACK32",
	"VK_FORMAT_A8B8G8R8_USCALED_PACK32",
	"VK_FORMAT_A8B8G8R8_SSCALED_PACK32",
	"VK_FORMAT_A8B8G8R8_UINT_PACK32",
	"VK_FORMAT_A8B8G8R8_SINT_PACK32",
	"VK_FORMAT_A8B8G8R8_SRGB_PACK32",
	"VK_FORMAT_A2R10G10B10_UNORM_PACK32",
	"VK_FORMAT_A2R10G10B10_SNORM_PACK32",
	"VK_FORMAT_A2R10G10B10_USCALED_PACK32",
	"VK_FORMAT_A2R10G10B10_SSCALED_PACK32",
	"VK_FORMAT_A2R10G10B10_UINT_PACK32",
	"VK_FORMAT_A2R10G10B10_SINT_PACK32",
	"VK_FORMAT_A2B10G10R10_UNORM_PACK32",
	"VK_FORMAT_A2B10G10R10_SNORM_PACK32",
	"VK_FORMAT_A2B10G10R10_USCALED_PACK32",
	"VK_FORMAT_A2B10G10R10_SSCALED_PACK32",
	"VK_FORMAT_A2B10G10R10_UINT_PACK32",
	"VK_FORMAT_A2B10G10R10_SINT_PACK32",
	"VK_FORMAT_R16_UNORM",
	"VK_FORMAT_R16_SNORM",
	"VK_FORMAT_R16_USCALED",
	"VK_FORMAT_R16_SSCALED",
	"VK_FORMAT_R16_UINT",
	"VK_FORMAT_R16_SINT",
	"VK_FORMAT_R16_SFLOAT",
	"VK_FORMAT_R16G16_UNORM",
	"VK_FORMAT_R16G16_SNORM",
	"VK_FORMAT_R16G16_USCALED",
	"VK_FORMAT_R16G16_SSCALED",
	"VK_FORMAT_R16G16_UINT",
	"VK_FORMAT_R16G16_SINT",
	"VK_FORMAT_R16G16_SFLOAT",
	"VK_FORMAT_R16G16B16_UNORM",
	"VK_FORMAT_R16G16B16_SNORM",
	"VK_FORMAT_R16G16B16_USCALED",
	"VK_FORMAT_R16G16B16_SSCALED",
	"VK_FORMAT_R16G16B16_UINT",
	"VK_FORMAT_R16G16B16_SINT",
	"VK_FORMAT_R16G16B16_SFLOAT",
	"VK_FORMAT_R16G16B16A16_UNORM",
	"VK_FORMAT_R16G16B16A16_SNORM",
	"VK_FORMAT_R16G16B16A16_USCALED",
	"VK_FORMAT_R16G16B16A16_SSCALED",
	"VK_FORMAT_R16G16B16A16_UINT",
	"VK_FORMAT_R16G16B16A16_SINT",
	"VK_FORMAT_R16G16B16A16_SFLOAT",
	"VK_FORMAT_R32_UINT",
	"VK_FORMAT_R32_SINT",
	"VK_FORMAT_R32_SFLOAT",
	"VK_FORMAT_R32G32_UINT",
	"VK_FORMAT_R32G32_SINT",
	"VK_FORMAT_R32G32_SFLOAT",
	"VK_FORMAT_R32G32B32_UINT",
	"VK_FORMAT_R32G32B32_SINT",
	"VK_FORMAT_R32G32B32_SFLOAT",
	"VK_FORMAT_R32G32B32A32_UINT",
	"VK_FORMAT_R32G32B32A32_SINT",
	"VK_FORMAT_R32G32B32A32_SFLOAT",
	"VK_FORMAT_R64_UINT",
	"VK_FORMAT_R64_SINT",
	"VK_FORMAT_R64_SFLOAT",
	"VK_FORMAT_R64G64_UINT",
	"VK_FORMAT_R64G64_SINT",
	"VK_FORMAT_R64G64_SFLOAT",
	"VK_FORMAT_R64G64B64_UINT",
	"VK_FORMAT_R64G64B64_SINT",
	"VK_FORMAT_R64G64B64_SFLOAT",
	"VK_FORMAT_R64G64B64A64_UINT",
	"VK_FORMAT_R64G64B64A64_SINT",
	"VK_FORMAT_R64G64B64A64_SFLOAT",
	"VK_FORMAT_B10G11R11_UFLOAT_PACK32",
	"VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",
	"VK_FORMAT_D16_UNORM",
	"VK_FORMAT_X8_D24_UNORM_PACK32",
	"VK_FORMAT_D32_SFLOAT",
	"VK_FORMAT_S8_UINT",
	"VK_FORMAT_D16_UNORM_S8_UINT",
	"VK_FORMAT_D24_UNORM_S8_UINT",
	"VK_FORMAT_D32_SFLOAT_S8_UINT",
	"VK_FORMAT_BC1_RGB_UNORM_BLOCK",
	"VK_FORMAT_BC1_RGB_SRGB_BLOCK",
	"VK_FORMAT_BC1_RGBA_UNORM_BLOCK",
	"VK_FORMAT_BC1_RGBA_SRGB_BLOCK",
	"VK_FORMAT_BC2_UNORM_BLOCK",
	"VK_FORMAT_BC2_SRGB_BLOCK",
	"VK_FORMAT_BC3_UNORM_BLOCK",
	"VK_FORMAT_BC3_SRGB_BLOCK",
	"VK_FORMAT_BC4_UNORM_BLOCK",
	"VK_FORMAT_BC4_SNORM_BLOCK",
	"VK_FORMAT_BC5_UNORM_BLOCK",
	"VK_FORMAT_BC5_SNORM_BLOCK",
	"VK_FORMAT_BC6H_UFLOAT_BLOCK",
	"VK_FORMAT_BC6H_SFLOAT_BLOCK",
	"VK_FORMAT_BC7_UNORM_BLOCK",
	"VK_FORMAT_BC7_SRGB_BLOCK",
	"VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
	"VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
	"VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
	"VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
	"VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
	"VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
	"VK_FORMAT_EAC_R11_UNORM_BLOCK",
	"VK_FORMAT_EAC_R11_SNORM_BLOCK",
	"VK_FORMAT_EAC_R11G11_UNORM_BLOCK",
	"VK_FORMAT_EAC_R11G11_SNORM_BLOCK",
	"VK_FORMAT_ASTC_4x4_UNORM_BLOCK",
	"VK_FORMAT_ASTC_4x4_SRGB_BLOCK",
	"VK_FORMAT_ASTC_5x4_UNORM_BLOCK",
	"VK_FORMAT_ASTC_5x4_SRGB_BLOCK",
	"VK_FORMAT_ASTC_5x5_UNORM_BLOCK",
	"VK_FORMAT_ASTC_5x5_SRGB_BLOCK",
	"VK_FORMAT_ASTC_6x5_UNORM_BLOCK",
	"VK_FORMAT_ASTC_6x5_SRGB_BLOCK",
	"VK_FORMAT_ASTC_6x6_UNORM_BLOCK",
	"VK_FORMAT_ASTC_6x6_SRGB_BLOCK",
	"VK_FORMAT_ASTC_8x5_UNORM_BLOCK",
	"VK_FORMAT_ASTC_8x5_SRGB_BLOCK",
	"VK_FORMAT_ASTC_8x6_UNORM_BLOCK",
	"VK_FORMAT_ASTC_8x6_SRGB_BLOCK",
	"VK_FORMAT_ASTC_8x8_UNORM_BLOCK",
	"VK_FORMAT_ASTC_8x8_SRGB_BLOCK",
	"VK_FORMAT_ASTC_10x5_UNORM_BLOCK",
	"VK_FORMAT_ASTC_10x5_SRGB_BLOCK",
	"VK_FORMAT_ASTC_10x6_UNORM_BLOCK",
	"VK_FORMAT_ASTC_10x6_SRGB_BLOCK",
	"VK_FORMAT_ASTC_10x8_UNORM_BLOCK",
	"VK_FORMAT_ASTC_10x8_SRGB_BLOCK",
	"VK_FORMAT_ASTC_10x10_UNORM_BLOCK",
	"VK_FORMAT_ASTC_10x10_SRGB_BLOCK",
	"VK_FORMAT_ASTC_12x10_UNORM_BLOCK",
	"VK_FORMAT_ASTC_12x10_SRGB_BLOCK",
	"VK_FORMAT_ASTC_12x12_UNORM_BLOCK",
	"VK_FORMAT_ASTC_12x12_SRGB_BLOCK"
	/* bullshit
VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,*/
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Enums
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
* Added in 1.0.0
* Graphics use enum from 1000
*/
typedef enum GraphicsElementType{
	GraphicsElement_ElementGraphics = 1000
}GraphicsElementType;
/*
* Added in 1.0.0
* Graphics use enum from 1000
*/
typedef enum GraphicsHeaderType{
	GraphicsHeader_Weights = 1000,
	GraphicsHeader_ImageSource = 1001,
	GraphicsHeader_BufferSource = 1002,
	GraphicsHeader_GraphicsWindow = 1005,
	GraphicsHeader_Scene = 1006,
	GraphicsHeader_Camera = 1007,
	GraphicsHeader_Light = 1008,
	GraphicsHeader_Skin = 1009,
	GraphicsHeader_Position = 1010,
	GraphicsHeader_AnimationChannel = 1011,
	GraphicsHeader_Animation = 1012,
	GraphicsHeader_Material = 1013,
	GraphicsHeader_Texture = 1014,
	GraphicsHeader_Buffer = 1015,
	GraphicsHeader_Render = 1016,
}GraphicsHeaderType;
/*
* Added in 1.0.0
*/
typedef uint64_t GraphicsEffectBufferIndex;
/*
* Added in 1.0.0
*/
typedef uint32_t GraphicsEffectIdentifier;
/*
* Added in 1.0.0
*/
typedef enum GraphicsEffectsType {
	GraphicsEffect_Undefined = 0,
	GraphicsEffect_Generic3D = 1,
	GraphicsEffect_Generic2D = 2,
}GraphicsEffectsType;
/*
* Added in 1.0.0
* Src Memory is the host accessible and coherent part of the GPU memory.
* Dst Memory is the highly optimized part of the memory used for storing things permenantly like images.
* Read more at https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryPropertyFlagBits.html
  where src == VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
  and dst == VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
*/
typedef enum TargetMemoryType{
	TargetMemory_Src = 0,
	TargetMemory_Dst = 1
}TargetMemoryType;
/*
* Added in 1.0.0
* AllocationType specifies how a allocation is allocated, Linear being in 1 giant buffer (better for speed and temporary allocations),
  and discrite allocating a new buffer for every allocation (more for permenant allocations and very large textures/buffers). 
*/
typedef enum AllocationType{
	AllocationType_Linear = 0,
	AllocationType_Discrite = 1
}AllocationType;
/*
* Added in 1.0.0
* Shader Alpha Mode, desribes how the alpha is processed on in the shader.
* Opaque will just ignore alpha channel.
* Mask will use threshold to determine what is transperant or not.
* Blend will use a blending operations to blend it together.
*/
typedef enum AlphaMode{
	AlphaMode_Opaque = 0,
	AlphaMode_Mask = 1,
	AlphaMode_Blend = 2
}AlphaMode;
/*
* Added in 1.0.0
* This determines the colourmode of a material.
* Colour means all colours work as usual with basecolourfactor being multiplied onto it.
* Alpha means only the R channel is used in the image and the resulting colour value is [1, 1, 1, R_channel].
* Solid means that only basecolourfactor in the material affects the colour, and are not multiplied with image like colour.
* MaterialMode applies to all images in a material.
*/
typedef enum MaterialTextureMode{
	MaterialMode_Colour = 0,
	MaterialMode_Alpha = 1,
	MaterialMode_Solid = 2
}MaterialTextureMode;
/*
* Added in 1.0.0
* describes the interpolation of an animation
*/
typedef enum InterpolationType{
	InterpolationType_Linear = 1,
	InterpolationType_Step = 2,
	InterpolationType_Cubicspline = 3
}InterpolationType;
/*
* Added in 1.0.0
* Defines what is animated by the animation
*/
typedef enum AnimationTargetType{
	AnimationTargetType_Translation = 1,
	AnimationTargetType_Rotation = 2,
	AnimationTargetType_Scale = 3,
	AnimationTargetType_Weights = 4
}AnimationTargetType;
/*
* Added in 1.0.0
* Once goes one direction and once finished stops.
* Repeat goes one direction then resets.
* BackToFront goes one direction then reverses back.
*/
typedef enum AnimationPlaybackMode{
	AnimationPlaybackMode_Once = 0,
	AnimationPlaybackMode_Repeat = 1,
	AnimationPlaybackMode_BackToFront = 2
}AnimationPlaybackMode;
/*
* Added in 1.0.0
* Type Of Attribute
* Morphable with weights means that in the shader it is 
  weights * POSITION
  for example
*/
typedef enum AttributeType{
	AttributeType_TexCoord = 1,
	AttributeType_Position = 2, //morphable with weights
	AttributeType_Normal = 3, //morphable with weights
	AttributeType_Tangent = 4, //morphable with weights
	AttributeType_Colour = 5,
	AttributeType_Joints = 6,
	AttributeType_SkinWeights = 7
}AttributeType;
/*
* Added in 1.0.0
* CameraType
*/
typedef enum CameraType{
	CameraType_Perspective = 0,
	CameraType_Orthographic = 1
}CameraType;
/*
* Added in 1.0.0
* LightType
*/
typedef enum LightType{
	LightType_Spot,
	LightType_Directional,
	LightType_Point
}LightType;
//Ports From Vulkan
/*
* Added in 1.0.0
*/
typedef enum TextureFilterMode {
	TextureFilterMode_Nearest = 0,
	TextureFilterMode_Linear = 1,
	//TextureFilterMode_Cubic_Image = 1000015000
}TextureFilterMode;
/*
* Added in 1.0.0
*/
typedef enum TextureAddressMode {
	TextureAddressMode_Repeat = 0,
	TextureAddressMode_MirroredRepeat = 1,
	TextureAddressMode_ClampToEdge = 2,
	TextureAddressMode_ClampToBorder = 3,
	TextureAddressMode_MirrorClampToEdge = 4
}TextureAddressMode;
/*
* Added in 1.0.0
*/
typedef enum AttributeInputRate {
	AttributeInputRate_Vertex = 0,
	AttributeInputRate_Instance = 1,
}AttributeInputRate;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Flags
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
* Added in 1.0.0
* Defined by VkImageUsageFlagBits.
*/
typedef enum TextureUsageFlags{   //vkcompatible
	TextureUsage_TransferSrcBit = 0x00000001,
	TextureUsage_TransferDstBit = 0x00000002,
	TextureUsage_SampledBit = 0x00000004,
	TextureUsage_StorageBit = 0x00000008,
	TextureUsage_ColourAttachmentBit = 0x00000010,
	TextureUsage_DepthStencilAttachmentBit = 0x00000020,
	TextureUsage_TransientAttachmentBit = 0x00000040,
	TextureUsage_InputAttachmentBit = 0x00000080,
	TextureUsage_ShadingRateBit = 0x00000100,
	TextureUsage_FragmentDensityMapBit = 0x00000200
}TextureUsageFlags;
/*
* Added in 1.0.0
* Defined by VkBufferUsageFlagBits.
*/
typedef enum BufferUsageFlags { //vkcompatible
	BufferUsage_TransferSrcBit = 0x00000001,
	BufferUsage_TransferDstBit = 0x00000002,
	BufferUsage_UniformTexelBit = 0x00000004,
	BufferUsage_StorageTexelBit = 0x00000008,
	BufferUsage_UniformBit = 0x00000010,
	BufferUsage_StorageBit = 0x00000020,
	BufferUsage_IndexBit = 0x00000040,
	BufferUsage_VertexBit = 0x00000080,
	BufferUsage_IndirectBit = 0x00000100,
	BufferUsage_ShaderDeviceAddressBit = 0x00020000,
	BufferUsage_TransformFeedbackBufferBit = 0x00000800,
	BufferUsage_TransformFeedbackCounterBufferBit = 0x00001000,
	BufferUsage_ConditionalRenderingBit = 0x00000200,
	BufferUsage_RayTracingBit = 0x00000400
}BufferUsageFlags;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Structs
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
* Added in 1.0.0
* Created with GPUmalloc and GPUfree, this is the custom GPU allocator for this API.
*/
struct GPU_ArenaAllocater;
typedef struct GPU_Allocation{
	uint64_t Pointer; //really just offset from the gpu memory buffer start to the allocation start
	uint64_t SizeBytes;
	TargetMemoryType TargetMemory;
	AllocationType AllocationType;
#ifdef TEX_EXPOSE_GRAPHICS
	struct
	{
		struct GPU_ArenaAllocater* pArenaAllocater;
		VkDeviceMemory VkMemory;
	}Allocater;
#else
	struct
	{
		void* pArenaAllocater;
		void* VkMemory;
	}Allocater;
#endif
}GPU_Allocation;


#define DeferredImageCount 7
#define TotalDeferredFramebufferCount 9  //7 defferred framebuffers + 1 render target + 1 screen render target

#define StorageBufferBindings 5
#define MaterialTextureBindings 5

//for internal API use or low level API use.
#ifdef TEX_EXPOSE_GRAPHICS


const VkFormat DeferredFormats[DeferredImageCount] = {
	VK_FORMAT_B8G8R8A8_UNORM, //ALBEDO
	VK_FORMAT_R16G16B16A16_SFLOAT, //POSITION
	VK_FORMAT_R16G16B16A16_SFLOAT, //NORMAL
	VK_FORMAT_B8G8R8A8_UNORM, //PBR
	VK_FORMAT_B8G8R8A8_UNORM, //accum
	VK_FORMAT_B8G8R8A8_UNORM, //revealage
	VK_FORMAT_D32_SFLOAT_S8_UINT  //DEPTH
};
const VkImageUsageFlags DeferredImageUsages[DeferredImageCount] = {
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT
};
const VkImageAspectFlags DeferredImageAspects[DeferredImageCount] = {
	VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_DEPTH_BIT
};

#define SwapChainPresentModePrioritySize 1
const VkPresentModeKHR SwapChainPresentModePriority[SwapChainPresentModePrioritySize] = {
	VK_PRESENT_MODE_IMMEDIATE_KHR
};
#define SwapChainFormatAndColourSpacePrioritySize 1
const VkFormat SwapChainFormatPriority[SwapChainFormatAndColourSpacePrioritySize] = {
	VK_FORMAT_B8G8R8A8_UNORM
};
const VkColorSpaceKHR SwapChainColourSpacePriority[SwapChainFormatAndColourSpacePrioritySize] = {
	VK_COLORSPACE_SRGB_NONLINEAR_KHR
};
#define TextureBackupFormatPrioritySize 2
const GraphicsFormat TextureBackupFormatPriority[TextureBackupFormatPrioritySize] = {
	GraphicsFormat_R8G8B8A8_SRGB,
	GraphicsFormat_B8G8R8A8_SRGB,
};
/*
* Added in 1.0.0
*/
const size_t LogicalDeviceExtensionsSize = 1;
const char* LogicalDeviceExtensions[] = {
	"VK_KHR_swapchain"
};
/*
* Added in 1.0.0
* for multithread safety GPU malloc
*/
typedef struct GPU_ArenaAllocater {
	uint64_t Size;
	uint64_t Alignment;

	Mutex mutex;

	uint64_t AllocationsSize;
	GPU_Allocation* Allocations;

	VkBuffer VkBuffer;
	VkDeviceMemory VkMemory;

	void* MappedMemory;
}GPU_ArenaAllocater;
/*
* Added in 1.0.0
* for GPU malloc
*/
typedef struct GPU_MemoryBuffer{
	uint64_t Size;
	uint64_t Alignment;

	GPU_ArenaAllocater* ArenaAllocaters; //size of CPU.MaxThreads
	uint32_t* Indexes; //size of CPU.MaxThreads
}GPU_MemoryBuffer;
/*
* Added in 1.0.0
*/
typedef struct PhysicalDevice{
	VkPhysicalDevice VkPhysicalDevice;
	VkPhysicalDeviceProperties Properties;
	VkPhysicalDeviceFeatures Features;
	VkPhysicalDeviceMemoryProperties MemoryProperties;

	VkExtensionProperties* ExtensionsAvailable;
	size_t ExtensionsAvailableSize;

	VkQueueFamilyProperties* QueueFamilyProperties;
	uint32_t QueueFamilyPropertiesSize;
}PhysicalDevice;
/*
* Added in 1.0.0
*/
typedef struct LogicalDevice{
	const PhysicalDevice* pPhysicalDevice;
	VkDevice VkLogicalDevice;
	//Graphics Command Queue
	uint32_t GraphicsQueueFamilyIndex;
	uint32_t GraphicsQueueFamilySize;
	Mutex* GraphicsQueueMutexes;
	//Memory Command Queue
	uint32_t MemoryQueueFamilyIndex;
	uint32_t MemoryQueueFamilySize;
	Mutex* MemoryQueueMutexes;
	//Compute Command Queue
	uint32_t ComputeQueueFamilyIndex;
	uint32_t ComputeQueueFamilySize;
	Mutex* ComputeQueueMutexes;
	//allocating related
	GPU_MemoryBuffer SrcBuffer;
	GPU_MemoryBuffer DstBuffer;
}LogicalDevice;
#endif

/*
* Added in 1.0.0
* TEXI is the only supported format within this graphics api. All formats MUST be converted to TEXI to work.
* Can be compressed but then only can be used by GPU
* can ONLY be a pointer
*/
typedef struct TEXI_HEADER{
	uint64_t Width;
	uint64_t Height;
	uint64_t Depth;
	uint64_t ImageSize; //size of image/first mipmap
	uint64_t LinearSize; //linear size is of all mipmaps too
	uint64_t MipmapCount;

	GraphicsFormat Format;

	unsigned char Data[]; //can contain mipmaps too //data is tightly packed

}TEXI_HEADER;


typedef TEXRESULT(ConvertXtoTEXI)(FileData*, TEXI_HEADER**); //conversion template

typedef TEXRESULT(ConvertTEXItoX)(TEXI_HEADER*, FileData*); //conversion template


typedef uint32_t SPIRV;

/*
* Added in 1.0.0
*/
typedef struct DeferredImage{
#ifdef TEX_EXPOSE_GRAPHICS
	VkImage Image;
	VkImageView ImageView;
	VkDeviceMemory Memory;
#else
	void* Image;
	void* ImageView;
	void* Memory;
#endif
}DeferredImage;
/*
* Added in 1.0.0
*/
struct RHeaderGraphicsWindow;
typedef struct SwapChainFrameBuffer{
	struct RHeaderGraphicsWindow* pGraphicsWindow;
	uint32_t FrameIndex;
	uint32_t QueueIndex;
	uint32_t ThreadIndex;
	uint32_t SwapChainIndex;

	c89atomic_flag RenderingFlag;	
#ifdef TEX_EXPOSE_GRAPHICS
	VkSemaphore VkRenderFinishedSemaphore;
	VkSemaphore VkImageAvailableSemaphore;

	VkCommandBuffer VkRenderCommandBuffer;
	VkCommandPool VkRenderCommandPool;

	VkFence VkFrameFence;

	VkImage VkSwapChainImage;
	VkImageView VkSwapChainImageView;
#else
	void* VkRenderFinishedSemaphore;
	void* VkImageAvailableSemaphore;

	void* VkRenderCommandBuffer;
	void* VkRenderCommandPool;
	void* VkFrameFence;

	void* VkSwapChainImage;
	void* VkSwapChainImageView;
#endif
	DeferredImage DeferredImages[DeferredImageCount];
}SwapChainFrameBuffer;
/*
* Added in 1.0.0
*/
typedef struct SwapChain{
	SwapChainFrameBuffer* FrameBuffers;
#ifdef TEX_EXPOSE_GRAPHICS
	VkSwapchainKHR VkSwapChain;
#else
	void* VkSwapChain;

#endif
}SwapChain;
/*
* Added in 1.0.0
* Deferred pass push constants.
*/
typedef struct PushConstantsDeferred {
	uint32_t pad;
}PushConstantsDeferred;
/*
* Added in 1.0.0
* additional pushconstants for Generic3D.
*/
typedef struct PushConstantsGeneric3D{
	mat4 VP;
	uint32_t InfosOffset;
	uint32_t WeightsOffset;
	uint32_t JointsOffset;
	uint32_t MatrixsOffset;
}PushConstantsGeneric3D;
/*
* Added in 1.0.0
* additional pushconstants for Generic2D.
*/
typedef struct PushConstantsGeneric2D{
	mat4 VP;
	uint32_t pad;
	uint32_t pad1;
}PushConstantsGeneric2D;
/*
* Added in 1.0.0
*/
typedef struct Generic3DInfo {
	uint32_t TargetGroup;
	uint32_t Bits;
}Generic3DInfo;
/*
* Added in 1.0.0
*/
typedef struct PerspectiveCamera{
	double AspectRatio;  // min > 0
	double y_fov;         // required. min > 0
	double z_far;         // min > 0
	double z_near;        // required. min > 0
}PerspectiveCamera;
/*
* Added in 1.0.0
*/
typedef struct OrthographicCamera{
	double x_mag;   // required. must not be zero.
	double y_mag;   // required. must not be zero.
	double z_far;   // required. `zfar` must be greater than `znear`.
	double z_near;  // required
}OrthographicCamera;
/*
* Added in 1.0.0
*/
typedef struct SpotLight{
	double InnerConeAngle;
	double OuterConeAngle;
}SpotLight;
/*
* Added in 1.0.0
*/
typedef struct DirectionalLight{
	double pad;
}DirectionalLight;
/*
* Added in 1.0.0
*/
typedef struct PointLight{
	double pad;
}PointLight;
/*
* Added in 1.0.0
*/
typedef struct Accessor{
	ResourceHeaderAllocation iBuffer; // Required
	uint64_t ByteOffset;  // minimum 0, default 0
	uint64_t ByteStride;  // default 0 = tightly packed

	bool Normalized;    // optional.
	GraphicsFormat Format;  // (required)
	uint64_t Count;       // (required)
	AccessorType Type;           // (required) One of FormatType
	AttributeInputRate Inputrate; // (required)
}Accessor;
/*
* Added in 1.0.0
*/
typedef struct AnimationSampler{
	Accessor Input;                  // required
	Accessor Output;                 // required
	InterpolationType Interpolation; // default "LINEAR"
}AnimationSampler;
/*
* Added in 1.0.0
*/
typedef struct Attribute{
	Accessor Accessor;
	AttributeType AttribType;
	uint32_t TargetGroup;//index telling what "target group" each attribute belongs to, 0 if default target ie original mesh
}Attribute;
/*
* Added in 1.0.0
*/
typedef struct TextureInfo{
	ResourceHeaderAllocation iTexture;  // required.
	uint32_t UVIndex;    // The set index of texture's TEXCOORD attribute used for
}TextureInfo;

/*
* Added in 1.0.0
*/
typedef struct GPU_Texture{
#ifdef TEX_EXPOSE_GRAPHICS
	VkImage VkImage;
	VkImageView VkImageView;
	VkSampler VkSampler;
#else
	void* VkImage;
	void* VkImageView;
	void* VkSampler;
#endif
	GPU_Allocation Allocation;
}GPU_Texture;
/*
* Added in 1.0.0
*/
typedef struct GPU_Buffer{
#ifdef TEX_EXPOSE_GRAPHICS
	VkBuffer VkBuffer;
#else
	void* VkBuffer;
#endif
	GPU_Allocation Allocation;
}GPU_Buffer;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ResourceHeaders
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
* Added in 1.0.0
*/
typedef struct RHeaderImageSourceCreateInfo{
	TEXI_HEADER* ImageData;
}RHeaderImageSourceCreateInfo;
typedef struct RHeaderImageSource{
	ResourceHeaderTEMPLATE Header;
	//custom
	TEXI_HEADER* ImageData;
}RHeaderImageSource;

/*
* Added in 1.0.0
* Multiple Parents Undefined.
*/
typedef struct RHeaderGraphicsWindowCreateInfo {
	uint32_t TargetFrameBuffersSize; //this is the target but rarely will be.
	uint32_t TargetExtentHeight;
	uint32_t TargetExtentWidth;
}RHeaderGraphicsWindowCreateInfo;
typedef struct RHeaderGraphicsWindow {
	ResourceHeaderTEMPLATE Header;
	
	//custom
	uint32_t TargetFrameBuffersSize;
	uint32_t TargetExtentHeight;
	uint32_t TargetExtentWidth;
	
	//every reinit
	uint32_t CurrentFrameBuffersSize;
	uint32_t CurrentExtentHeight;
	uint32_t CurrentExtentWidth;
#ifdef TEX_EXPOSE_GRAPHICS
	VkFormat CurrentSurfaceFormat;
	VkColorSpaceKHR CurrentSurfaceColourSpace;
	VkPresentModeKHR CurrentSurfacePresentMode;

	LogicalDevice* pLogicalDevice;
	VkSurfaceKHR VkSurface;
#else
	GraphicsFormat CurrentSurfaceFormat;
	uint32_t CurrentSurfaceColourSpace;
	uint32_t CurrentSurfacePresentMode;

	void* pLogicalDevice;
	void* VkSurface;
#endif
	Window* pWindow;

	SwapChain SwapChain;

	uint32_t FrameIndex;
	uint32_t FramesDone;

	c89atomic_flag RecreateFlag;
	c89atomic_flag CloseFlag;

	Mutex SwapChainAccessMutex;
#ifdef TEX_EXPOSE_GRAPHICS
	VkShaderModule VkShaderVertexDeferred;
	VkShaderModule VkShaderFragmentDeferred;

	VkDescriptorSetLayout VkDescriptorSetLayoutInputAttachment;
	VkDescriptorSet* VkDescriptorSetsInputAttachment;
	VkDescriptorPool VkDescriptorPoolDeferred;

	VkPipelineLayout VkPipelineLayoutDeferred;
	VkRenderPass VkRenderPassDeferred;
	VkPipeline VkPipelineDeferred;
#else
	void* VkShaderVertexDeferred;
	void* VkShaderFragmentDeferred;

	void* VkDescriptorSetLayoutInputAttachment;
	void** VkDescriptorSetsInputAttachment;
	void* VkDescriptorPoolDeferred;

	void* VkPipelineLayoutDeferred;
	void* VkRenderPassDeferred;
	void* VkPipelineDeferred;
#endif
}RHeaderGraphicsWindow;

/*
* Added in 1.0.0
* Creates a texture ready for use in the graphics API.
* To Create an empty image make pImageSource->ImageData->LinearSize = NULL && pImageSource->ImageData->ImageSize
*/
typedef struct RHeaderTextureCreateInfo{
	RHeaderGraphicsWindow* pGraphicsWindow; //required
	RHeaderImageSource* pImageSource; //required

	//Sampler
	TextureFilterMode MinFilter; //default nearest
	TextureFilterMode MagFilter; //default nearest
	TextureAddressMode AddressModeU; //default repeat
	TextureAddressMode AddressModeV; //default repeat
	TextureAddressMode AddressModeW; //default repeat
	TextureUsageFlags TextureUsage;  //required VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT

	AllocationType AllocationType; //default linear
}RHeaderTextureCreateInfo;
typedef struct RHeaderTexture{
	ResourceHeaderTEMPLATE Header;

	//custom
	ResourceHeaderAllocation iGraphicsWindow; //required
	ResourceHeaderAllocation iImageSource; //required

	TextureFilterMode MinFilter; //default nearest
	TextureFilterMode MagFilter; //default nearest
	TextureAddressMode AddressModeU; //default repeat
	TextureAddressMode AddressModeV; //default repeat
	TextureAddressMode AddressModeW; //default repeat
	TextureUsageFlags TextureUsage; //required VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT

	AllocationType AllocationType; //default linear

	//per initialization
	GPU_Texture GPU_Texture;
}RHeaderTexture;

/*
* Added in 1.0.0
*/
typedef struct RHeaderBufferSourceCreateInfo{
	FileData Data;
}RHeaderBufferSourceCreateInfo;
typedef struct RHeaderBufferSource{
	ResourceHeaderTEMPLATE Header;

	//custom
	FileData Data;
}RHeaderBufferSource;


/*
* Added in 1.0.0
* Creates a buffer ready for use in the graphics API.
* To Create an empty buffer make pBufferSource->BufferData = NULL
*/
typedef struct RHeaderBufferCreateInfo{
	RHeaderGraphicsWindow* pGraphicsWindow; //required
	RHeaderBufferSource* pBufferSource;

	AllocationType AllocationType; //default linear
	BufferUsageFlags BufferUsage;  //default VK_BUFFER_USAGE_INDEX_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT
}RHeaderBufferCreateInfo;
typedef struct RHeaderBuffer{
	ResourceHeaderTEMPLATE Header;

	//custom
	ResourceHeaderAllocation iGraphicsWindow;
	ResourceHeaderAllocation iBufferSource;

	AllocationType AllocationType; //default linear
	BufferUsageFlags BufferUsage; //default VK_BUFFER_USAGE_INDEX_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT

	//per initialization
	GPU_Buffer GPU_Buffer;
}RHeaderBuffer;

/*
* Added in 1.0.0
* PositonHeaders give gameobjets position component that will be applied to gameobjects.
* Multiple position headers in a gameobject will just multiply with eachother.
*/
typedef struct RHeaderPositionCreateInfo{
	mat4 Matrix; //model matrix //optional
}RHeaderPositionCreateInfo;
typedef struct RHeaderPosition{
	ResourceHeaderTEMPLATE Header;

	//custom
	mat4 Matrix;
}RHeaderPosition;

/*
* Added in 1.0.0
* RHeaderLight will add a light source to a gameobject.
*/
typedef struct RHeaderLightCreateInfo{
	LightType Type;

	double Intensity;
	double Range;
	double Colour[3];

	union
	{
		SpotLight Spot;
		DirectionalLight Directional;
		PointLight Point;
	}LightU;

}RHeaderLightCreateInfo;
typedef struct RHeaderLight{
	ResourceHeaderTEMPLATE Header;

	//custom
	double Intensity;
	double Range;
	double Colour[3];

	union
	{
		SpotLight Spot;
		DirectionalLight Directional;
		PointLight Point;
	}LightU;

	LightType Type;


}RHeaderLight;

typedef struct GPU_RHeaderLight{
	//custom
	float Intensity;
	float Range;
	float InnerConeAngle;
	float OuterConeAngle;

	vec4 Colour;
	vec4 Position;


	LightType Type;
	uint32_t a;

	uint32_t b;
	uint32_t c;

	uint32_t bd;
	uint32_t cd;

	uint32_t bds;
	uint32_t cds;
}GPU_RHeaderLight;


/*
* Added in 1.0.0
*/
typedef struct RHeaderCameraCreateInfo{
	CameraType Type;
	union
	{
		PerspectiveCamera Perspective;
		OrthographicCamera Orthographic;
	}CameraU;
}RHeaderCameraCreateInfo;
typedef struct RHeaderCamera{
	ResourceHeaderTEMPLATE Header;

	//custom
	CameraType Type;
	union
	{
		PerspectiveCamera Perspective;
		OrthographicCamera Orthographic;
	}CameraU;

}RHeaderCamera;

/*
* Added in 1.0.0
*/
typedef struct RHeaderMaterialCreateInfo{
	RHeaderGraphicsWindow* pGraphicsWindow;

	vec4 BaseColourFactor; //default [1,1,1,1]
	vec4 EmissiveFactor; //default [0,0,0,0] //w channel not really supported

	float MetallicFactor;   // default 1
	float RoughnessFactor;  // default 1
	float AlphaCutoff;      // defaul t 0.5
	float OcclusionStrength;
	float NormalScale;

	AlphaMode AlphaMode; // default "OPAQUE"
	bool DoubleSided;  // default false;

	TextureInfo BaseColourTexture;
	TextureInfo MetallicRoughnessTexture;
	TextureInfo EmissiveTexture;
	TextureInfo NormalTexture;
	TextureInfo OcclusionTexture;

	MaterialTextureMode BaseColourMode;

}RHeaderMaterialCreateInfo;
typedef struct RHeaderMaterial{
	ResourceHeaderTEMPLATE Header;

	//custom
	ResourceHeaderAllocation iGraphicsWindow;

	vec4 BaseColourFactor; //default [1,1,1,1]
	vec4 EmissiveFactor; //default [0,0,0,0] //w channel not really supported

	float MetallicFactor;   // default 1
	float RoughnessFactor;  // default 1
	float AlphaCutoff;      // default 0.5
	float OcclusionStrength; // default 1
	float NormalScale; // default 1

	AlphaMode AlphaMode; // default "OPAQUE"
	bool DoubleSided;  // default false;

	TextureInfo BaseColourTexture;
	TextureInfo MetallicRoughnessTexture;
	TextureInfo EmissiveTexture;
	TextureInfo NormalTexture;
	TextureInfo OcclusionTexture;

	MaterialTextureMode BaseColourMode;

	//every reinit
#ifdef TEX_EXPOSE_GRAPHICS

	VkDescriptorSet* VkMaterialDescriptorSets;  //size of iGraphicsWindow framebuffers
	VkDescriptorPool VkMaterialDescriptorPool;
#else
	void** VkMaterialDescriptorSets;   //size of iGraphicsWindow framebuffers
	void* VkMaterialDescriptorPool;
#endif
}RHeaderMaterial;
typedef struct GPU_RHeaderMaterial{
	//vec4
	vec4 BaseColourFactor;
	//vec4
	vec4 EmissiveFactor;

	//vec4
	float MetallicFactor;
	float RoughnessFactor;
	float AlphaCutoff;
	float reservedf0;

	//vec4
	float OcclusionStrength;
	float NormalScale;
	float reservedf1;
	float reservedf2;

	//ivec4
	AlphaMode AlphaMode;
	int32_t DoubleSided;
	int32_t reservedi0;
	int32_t reservedi1;
	
	uint32_t BaseColourTextureIndex;
	uint32_t MetallicRoughnessTextureIndex;
	uint32_t EmissiveTextureIndex;
	uint32_t NormalTextureIndex;
	uint32_t OcclusionTextureIndex;

}GPU_RHeaderMaterial;

/*
* Added in 1.0.0
* Weights always have to be at least 1 in size for this header to be valid.
*/
typedef struct RHeaderWeightsCreateInfo{
	uint64_t WeightsSize;
	float* Weights;
} RHeaderWeightsCreateInfo;
typedef struct RHeaderWeights{
	ResourceHeaderTEMPLATE Header;

	uint64_t WeightsSize;
	float Weights[];
}RHeaderWeights;
/*
* Added in 1.0.0
*  Requires RHeaderAnimationChannel To transmit actions onto a gameobject.
* animations and animation channel input and output follow format of gltf animations.
https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#animations
CreateInfo Parameters:
* 
*/
typedef struct RHeaderAnimationCreateInfo{
	ResourceHeaderAllocation* pChannels; //optional
	uint64_t pChannelsSize;

	AnimationPlaybackMode PlaybackMode;
	double Speed;

}RHeaderAnimationCreateInfo;
typedef struct RHeaderAnimation{
	//acts as a channel for animation.

	ResourceHeaderTEMPLATE Header;

	//custom
	AnimationPlaybackMode PlaybackMode;
	double Speed;
	double Time;
	double LastTime;

	uint64_t longest;

	uint64_t iChannelsSize;
	ResourceHeaderAllocation iChannels[];
}RHeaderAnimation;

/*
* Added in 1.0.0
* subserviant to RHeaderAnimation
* Drop this into a gameobject for it to be animated by a animation.
*/
typedef struct RHeaderAnimationChannelCreateInfo
{
	AnimationSampler Sampler;              // required
	AnimationTargetType Target; //required
	RHeaderAnimation* pAnimation;  //required
}RHeaderAnimationChannelCreateInfo;
typedef struct RHeaderAnimationChannel
{
	//acts as a channel for animation.

	ResourceHeaderTEMPLATE Header;

	//custom

	AnimationSampler Sampler; // required
	AnimationTargetType Target; //required
	ResourceHeaderAllocation iAnimation; //required
	int64_t KeyFrame; //current keyframe
}RHeaderAnimationChannel;

/*
* Added in 1.0.0
* must be child of all joints and skeleton itself.
*/
typedef struct RHeaderSkinCreateInfo
{
	Object* pSkeleton;

	Accessor InverseBindMatrices;  //accessor for ibm matrices, a set of 4x4 matrices that corrospond to joints. //required
	Object** pJoints; //Refrences to the nodes of the skeletons.  //required
	uint64_t JointsSize;
}RHeaderSkinCreateInfo;
typedef struct RHeaderSkin //skin/skeletal animator
{
	ResourceHeaderTEMPLATE Header;

	//custom
	Accessor InverseBindMatrices;  //accessor for ibm matrices, a set of 4x4 matrices that corrospond to joints. //required

	ObjectAllocation iSkeleton;

	uint64_t JointsSize;
	ObjectAllocation iJoints[]; //Refrences to the nodes of the skeletons.  //required
}RHeaderSkin;

/*
* Added in 1.0.0
* when an object has a scene header it becomes scene root.
* Scenes can be toggled active or inactive.
*/
typedef struct RHeaderSceneCreateInfo
{
	bool InitialActive;
}RHeaderSceneCreateInfo;
typedef struct RHeaderScene
{
	ResourceHeaderTEMPLATE Header;

	bool Active;

}RHeaderScene;

/*
* Added in 1.0.0
* Renders create renderpasses and also render to a texture.
* Renders with multiple parents is undefined.

CreateInfo Parameters:
* pTextureTarget is a pointer to a RHeaderTexture that doesnt have to be initialized, and will serve as the product image. //required
* pGraphicsWindow is the window that the render will get all its resources from and will render from.
* pScenes is a pointer to an array of scenes that this render header will render.  //required
*/
typedef struct RHeaderRenderCreateInfo
{
	vec4 Clear;
	RHeaderTexture* pTextureTarget; //required
	RHeaderGraphicsWindow* pGraphicsWindow;  //required
	uint64_t pScenesSize;
	RHeaderScene** pScenes;
}RHeaderRenderCreateInfo;
typedef struct RHeaderRender
{
	ResourceHeaderTEMPLATE Header;

	//custom
	vec4 Clear;
	ResourceHeaderAllocation iGraphicsWindow;
	ResourceHeaderAllocation iTextureTarget;
	//per initialization
	uint32_t pFrameBuffersSize;
#ifdef TEX_EXPOSE_GRAPHICS
	VkFramebuffer* pFrameBuffers; //size of iGraphicsWindow framebuffersSize
#else
	void*** pFrameBuffers;  //size of iGraphicsWindow framebuffersSize
#endif
	uint64_t iScenesSize;
	ResourceHeaderAllocation iScenes[];
}RHeaderRender;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Element
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct ElementGraphicsCreateInfoEffect
{
	GraphicsEffectIdentifier Identifier;
	void* pEffectCreateInfo; //pointer to an effect create info of the corrosponding identifier.
}ElementGraphicsCreateInfoEffect;

/*
* Added in 1.0.0
*/
typedef struct ElementGraphicsCreateInfo
{
	RHeaderGraphicsWindow* pGraphicsWindow; //required
	RHeaderMaterial* pMaterial; //required

	uint64_t EffectCreateInfosSize;
	ElementGraphicsCreateInfoEffect* EffectCreateInfos;
}ElementGraphicsCreateInfo;
typedef struct ElementGraphics
{
	ElementTEMPLATE Header;

	//custom
	ResourceHeaderAllocation iGraphicsWindow;
	ResourceHeaderAllocation iMaterial;

	//effects
	uint64_t EffectsSize; //size in effects
	uint8_t Effects[]; //raw data array / struct extension
}ElementGraphics;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Effects
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef TEXRESULT(Create_GraphicsEffectTemplate)(ElementGraphics* pElement, void* pEffect, const void* pEffectCreateInfo, uint64_t* pAllocationSize, uint32_t ThreadIndex);
typedef void(Destroy_GraphicsEffectTemplate)(ElementGraphics* pElement, void* pEffect, bool Full, uint32_t ThreadIndex);

typedef void(ReCreate_GraphicsEffectTemplate)(ElementGraphics* pElement, void* pEffect, uint32_t ThreadIndex);

typedef void(Pack_GraphicsEffectTemplate)(const ElementGraphics* pElement, ElementGraphics* pCopiedElement, const void* pEffect, void* pCopiedEffect, uint64_t* pBufferPointer, void* pData, uint32_t ThreadIndex);
typedef void(UnPack_GraphicsEffectTemplate)(const ElementGraphics* pElement, ElementGraphics* pCopiedElement, const void* pEffect, void* pCopiedEffect, const void* pData, uint32_t ThreadIndex);


struct GraphicsEffectSignature;

/*
* All objects provided are multithread secure, please use them in your function.
*/
typedef void(UpdateSignature_GraphicsEffectTemplate)(struct GraphicsEffectSignature* pSignature, RHeaderGraphicsWindow* pGraphicsWindow,
	uint32_t FrameIndex, GPU_Allocation* GPU_Buffers, uint64_t* GPU_BufferPointers);
typedef void(Update_GraphicsEffectTemplate)(ElementGraphics* pElement, ResourceHeader* pHeader, Object* pGameObject, void* pEffect,
	RHeaderGraphicsWindow* pGraphicsWindow, uint32_t FrameIndex, RHeaderMaterial* pMaterialHeader, GPU_Allocation* GPU_Buffers, uint64_t* GPU_BufferPointers); //index of swapchain image


typedef void(DrawSignature_GraphicsEffectTemplate)(struct GraphicsEffectSignature* pSignature, RHeaderGraphicsWindow* pGraphicsWindow,
	uint32_t FrameIndex, GPU_Allocation* GPU_Buffers, uint64_t* GPU_BufferPointers);
typedef void(Draw_GraphicsEffectTemplate)(ElementGraphics* pElement, ResourceHeader* pHeader, Object* pGameObject, void* pEffect,
	RHeaderGraphicsWindow* pGraphicsWindow, uint32_t FrameIndex, RHeaderMaterial* pMaterialHeader, GPU_Allocation* GPU_Buffers, uint64_t* GPU_BufferPointers, RHeaderCamera* pCamera, mat4 CameraVP);


/*
* Added in 1.0.0
*/
typedef struct GraphicsEffectSignature {
	GraphicsEffectIdentifier Identifier; //required

	Create_GraphicsEffectTemplate* Constructor; //same as gameobject one. //optional but probably required.
	Destroy_GraphicsEffectTemplate* Destructor; //same as gameobject one. //optional but probably required.
	ReCreate_GraphicsEffectTemplate* ReConstructor; //same as gameobject one.  //optional
	Pack_GraphicsEffectTemplate* Packer; //same as gameobject one.  //optional but probably required.
	UnPack_GraphicsEffectTemplate* UnPacker; //same as gameobject one.  //optional but probably required.

	Update_GraphicsEffectTemplate* Update; //for uploading data to the GPU and stuff. //optional but probably required.
	UpdateSignature_GraphicsEffectTemplate* UpdateSignature; //before rendering 1 update for updating buffers descriptors etc. after element update loop  //optional

	Draw_GraphicsEffectTemplate* Draw; //for rendering the actual object. //optional but probably required.
	DrawSignature_GraphicsEffectTemplate* DrawSignature; //before rendering all the other items this calls functions right when the command buffer begins. (for updating compute shaders or something) //optional

	uint64_t SignatureGPUBuffersSize; //amount of buffers to allocate
}GraphicsEffectSignature;

/*
* Added in 1.0.0
*/
typedef struct GraphicsEffectTemplate {
	GraphicsEffectIdentifier Identifier; //required
	uint64_t AllocationSize; //size of the full struct
}GraphicsEffectTemplate;
/*
* Added in 1.0.0
*/
typedef struct GraphicsEffect {
	GraphicsEffectTemplate Header;
}GraphicsEffect;

/*
* Added in 1.0.0
CreateInfo Parameters:
* Indices is a Accessor struct specifying the indices buffer to be
  used in rendering. //Optional.
* Attributes is a pointer to an array of attributes specifying the desired attributes to be rendered,
  such as position, texcoord, etc. //Required.
* AttributesSize count of attributes. //Required.
* Offset and size for materials with texture atlas.
*/
typedef struct GraphicsEffectCreateInfoGeneric3D {
	Accessor Indices; //indices buffer
	uint64_t AttributesSize;
	Attribute* Attributes;
	
	int TextureOffset[2];
	int TextureSize[2];
}GraphicsEffectCreateInfoGeneric3D;
typedef struct GraphicsEffectGeneric3D {
	GraphicsEffectTemplate Header;

	Accessor Indices; //indices buffer

	uint64_t AttributesSize;

	//every reinit
#ifdef TEX_EXPOSE_GRAPHICS
	VkPipeline VkPipeline;

	VkShaderModule VkShaderVertex;
	VkShaderModule VkShaderFragment;
#else
	void* VkPipeline;

	void* VkShaderVertex;
	void* VkShaderFragment;
#endif

	Attribute* UsedAttributes; //reordered on the go
	Attribute Attributes[];
}GraphicsEffectGeneric3D;


/*
* Added in 1.0.0
CreateInfo Parameters:
* size and position of the element. //required
* bounding box size and position is both the collider and rendering frustrum 
  for a 2D element. //required
* Offset and size for materials with texture atlas.
*/
typedef struct GraphicsEffectCreateInfoGeneric2D {
	vec2 Size; //size in percentage of screen.
	vec3 Position; //position in percentage of screen.
	//bounding box means everything outside of it wont be rendered.
	vec2 BoundingBoxSize; //size in percentage of screen.
	vec2 BoundingBoxPosition; //position in percentage of screen.

	int TextureOffset[2];
	int TextureSize[2];
}GraphicsEffectCreateInfoGeneric2D;
typedef struct GraphicsEffectGeneric2D {
	GraphicsEffectTemplate Header; //required

	vec2 Size; //size in percentage of screen.
	vec3 Position; //position in percentage of screen.
	//bounding box means everything outside of it wont be rendered.
	vec2 BoundingBoxSize; //size in percentage of screen.
	vec2 BoundingBoxPosition; //position in percentage of screen.

	int TextureOffset[2];
	int TextureSize[2];

	//every reinit
#ifdef TEX_EXPOSE_GRAPHICS
	VkPipeline VkPipeline;

	VkShaderModule VkShaderVertex;
	VkShaderModule VkShaderFragment;
#else
	void* VkPipeline;

	void* VkShaderVertex;
	void* VkShaderFragment;
#endif
}GraphicsEffectGeneric2D;
typedef struct GPU_GraphicsEffectGeneric2D {
	vec2 Size; //size in percentage of screen.
	vec3 Position; //position in percentage of screen.
	//bounding box means everything outside of it wont be rendered.
	vec2 BoundingBoxSize; //size in percentage of screen.
	vec2 BoundingBoxPosition; //position in percentage of screen.

	int TextureOffset[2];
	int TextureSize[2];
}GPU_GraphicsEffectGeneric2D;




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Main
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifdef TEX_EXPOSE_GRAPHICS
typedef struct ConverterXtoTEXI {
	ConvertXtoTEXI* pFunction;
	uint32_t Identifier;
}ConverterXtoTEXI;
typedef struct ConverterTEXItoX {
	ConvertTEXItoX* pFunction;
	uint32_t Identifier;
}ConverterTEXItoX;


typedef struct GraphicsGenericResources {
	VkDescriptorSetLayout VkDescriptorSetLayoutMaterial;
	//3d
	VkDescriptorSetLayout VkDescriptorSetLayoutStorageBuffers;
	VkDescriptorSet* VkDescriptorSetsStorageBuffers;
	VkDescriptorPool VkDescriptorPool3D;
	VkPipelineLayout PipelineLayout3D;
	//2d	
	VkPipelineLayout PipelineLayout2D;
}GraphicsGenericResources;

typedef struct GraphicsUtils {
	VkInstance Instance;

	//Devices
	size_t DevicesSize;
	PhysicalDevice* PhysicalDevices;
	LogicalDevice* LogicalDevices;

	GraphicsGenericResources* GenericResources; //devicessize

	//Signatures
	ElementBuffer ElementGraphicsBuffer;
	ResourceHeaderBuffer RHeaderWeightsBuffer;
	ResourceHeaderBuffer RHeaderImageSourceBuffer;
	ResourceHeaderBuffer RHeaderBufferSourceBuffer;
	ResourceHeaderBuffer RHeaderGraphicsWindowBuffer;
	ResourceHeaderBuffer RHeaderSceneBuffer;
	ResourceHeaderBuffer RHeaderCameraBuffer;
	ResourceHeaderBuffer RHeaderLightBuffer;
	ResourceHeaderBuffer RHeaderSkinBuffer;
	ResourceHeaderBuffer RHeaderPositionBuffer;
	ResourceHeaderBuffer RHeaderAnimationChannelBuffer;
	ResourceHeaderBuffer RHeaderAnimationBuffer;
	ResourceHeaderBuffer RHeaderMaterialBuffer;
	ResourceHeaderBuffer RHeaderTextureBuffer;
	ResourceHeaderBuffer RHeaderBufferBuffer;
	ResourceHeaderBuffer RHeaderRenderBuffer;

	//Signature Buffers
	ElementSignature ElementGraphicsSig;
	ResourceHeaderSignature RHeaderWeightsSig;
	ResourceHeaderSignature RHeaderImageSourceSig;
	ResourceHeaderSignature RHeaderBufferSourceSig;
	ResourceHeaderSignature RHeaderGraphicsWindowSig;
	ResourceHeaderSignature RHeaderSceneSig;
	ResourceHeaderSignature RHeaderCameraSig;
	ResourceHeaderSignature RHeaderLightSig;
	ResourceHeaderSignature RHeaderSkinSig;
	ResourceHeaderSignature RHeaderPositionSig;
	ResourceHeaderSignature RHeaderAnimationChannelSig;
	ResourceHeaderSignature RHeaderAnimationSig;
	ResourceHeaderSignature RHeaderMaterialSig;
	ResourceHeaderSignature RHeaderTextureSig;
	ResourceHeaderSignature RHeaderBufferSig;
	ResourceHeaderSignature RHeaderRenderSig;

	//Effects
	GraphicsEffectSignature Generic3DSig;
	GraphicsEffectSignature Generic2DSig;
	GraphicsEffectSignature ReflectionSig;

	//internal

	ConverterXtoTEXI* ConvertersToTEXI;
	uint64_t ConvertersToTEXISize;
	Mutex ConvertersToTEXIMutex;

	ConverterTEXItoX* ConvertersFromTEXI;
	uint64_t ConvertersFromTEXISize;
	Mutex ConvertersFromTEXIMutex;

	GraphicsEffectSignature** GraphicsEffectSignatures;
	uint64_t GraphicsEffectSignaturesSize;
	Mutex GraphicsEffectSignaturesMutex;
}GraphicsUtils;
#endif


struct GraphicsResStruct
{
	void* pUtils;

	void* pInitialise_Graphics;
	void* pDestroy_Graphics;
	void* pUpdate_Graphics;

	void* pGet_AttributeTypePriority;
	void* pGet_FormatDetails;
	void* pCalculate_TotalMatrix;

	void* pCheck_Memory;
	void* pDestroy_GPU_MemoryBuffer;
	void* pCreate_GPU_MemoryBuffer;
	void* pResize_GPU_MemoryBuffer;
	void* pGPUmalloc;
	void* pGPUfree;

	void* pAdd_XtoTEXIconverter;
	void* pAdd_TEXItoXconverter;
	void* pRemove_XtoTEXIconverter;
	void* pRemove_TEXItoXconverter;
	void* pXtoTEXI;
	void* pTEXItoX;

	void* pRegister_GraphicsEffectSignature;
	void* pDeRegister_GraphicsEffectSignature;
	void* pFind_GraphicsEffectSignature;
	void* pGet_GraphicsEffect;

	void* pCreate_DummyTEXI;
	void* pCreate_ImageAtlas;
	void* pConvert_ImageData;
	void* pUpdate_Descriptor;
	void* pDestroy_GPU_Texture;
	void* pDestroy_GPU_Buffer;

	void* pGet_DeviceIndex;

	void* pDestroy_SwapChain;
	void* pReCreate_SwapChain;

}GraphicsRes;

//Initialise_Resources MUST be called to use the library in your dll
void Graphics_Initialise_Resources(FunctionInfo*** pExternFunctions, uint64_t* pExternFunctionsSize, ResourceInfo*** pExternResources, uint64_t* pExternResourcesSize)
{
	memset(&GraphicsRes, NULL, sizeof(GraphicsRes));

	ResourceImport(pExternResources, pExternResourcesSize, (const UTF8*)CopyData((void*)"Graphics::Utils"), &GraphicsRes.pUtils);

	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Get_AttributeTypePriority"), &GraphicsRes.pGet_AttributeTypePriority);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Get_FormatDetails"), &GraphicsRes.pGet_FormatDetails);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Calculate_TotalMatrix"), &GraphicsRes.pCalculate_TotalMatrix);

	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Check_Memory"), &GraphicsRes.pCheck_Memory);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Destroy_GPU_MemoryBuffer"), &GraphicsRes.pDestroy_GPU_MemoryBuffer);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Resize_GPU_MemoryBuffer"), &GraphicsRes.pResize_GPU_MemoryBuffer);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Create_GPU_MemoryBuffer"), &GraphicsRes.pCreate_GPU_MemoryBuffer);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::GPUmalloc"), &GraphicsRes.pGPUmalloc);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::GPUfree"), &GraphicsRes.pGPUfree);

	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Convert::Add_XtoTEXIconverter"), &GraphicsRes.pAdd_XtoTEXIconverter);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Convert::Add_TEXItoXconverter"), &GraphicsRes.pAdd_TEXItoXconverter);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Convert::Remove_XtoTEXIconverter"), &GraphicsRes.pRemove_XtoTEXIconverter);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Convert::Remove_TEXItoXconverter"), &GraphicsRes.pRemove_TEXItoXconverter);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Convert::XtoTEXI"), &GraphicsRes.pXtoTEXI);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Convert::TEXItoX"), &GraphicsRes.pTEXItoX);

	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Effects::Register_GraphicsEffectSignature"), &GraphicsRes.pRegister_GraphicsEffectSignature);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Effects::DeRegister_GraphicsEffectSignature"), &GraphicsRes.pDeRegister_GraphicsEffectSignature);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Effects::Find_GraphicsEffectSignature"), &GraphicsRes.pFind_GraphicsEffectSignature);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Effects::Get_GraphicsEffect"), &GraphicsRes.pGet_GraphicsEffect);


	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Create_DummyTEXI"), &GraphicsRes.pCreate_DummyTEXI);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Create_ImageAtlas"), &GraphicsRes.pCreate_ImageAtlas);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Convert_ImageData"), &GraphicsRes.pConvert_ImageData);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Update_Descriptor"), &GraphicsRes.pUpdate_Descriptor);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Destroy_GPU_Texture"), &GraphicsRes.pDestroy_GPU_Texture);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Destroy_GPU_Buffer"), &GraphicsRes.pDestroy_GPU_Buffer);


	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Get_DeviceIndex"), &GraphicsRes.pGet_DeviceIndex);

	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::Destroy_SwapChain"), &GraphicsRes.pDestroy_SwapChain);
	FunctionImport(pExternFunctions, pExternFunctionsSize, (const UTF8*)CopyData((void*)"Graphics::ReCreate_SwapChain"), &GraphicsRes.pReCreate_SwapChain);

}

float Graphics_Ref_Get_AttributeTypePriority(Attribute attribute)
{
	float(*function)(Attribute attribute) =
		(float(*)(Attribute attribute))GraphicsRes.pGet_AttributeTypePriority;

	return function(attribute);
}

FormatDetails Graphics_Ref_Get_FormatDetails(GraphicsFormat format)
{
	FormatDetails(*function)(GraphicsFormat format) =
		(FormatDetails(*)(GraphicsFormat format))GraphicsRes.pGet_FormatDetails;

	return function(format);
}
void Graphics_Ref_Calculate_TotalMatrix(mat4* pMatrix, ObjectAllocation Parent)
{
	void(*function)(mat4 * pMatrix, ObjectAllocation Parent) =
		(void(*)(mat4 * pMatrix, ObjectAllocation Parent))GraphicsRes.pCalculate_TotalMatrix;

	return function(pMatrix, Parent);
}

#ifdef TEX_EXPOSE_GRAPHICS

void Graphics_Ref_Destroy_GPU_MemoryBuffer(GPU_MemoryBuffer* pBuffer, LogicalDevice* pLogicalDevice)
{
	void (*function)(GPU_MemoryBuffer * pBuffer, LogicalDevice * pLogicalDevice) =
		(void(*)(GPU_MemoryBuffer * pBuffer, LogicalDevice * pLogicalDevice))GraphicsRes.pDestroy_GPU_MemoryBuffer;

	function(pBuffer, pLogicalDevice);
}
TEXRESULT Graphics_Ref_Create_GPU_MemoryBuffer(GPU_MemoryBuffer* pBuffer, LogicalDevice* pLogicalDevice, uint64_t Size, TargetMemoryType Type)
{
	TEXRESULT(*function)(GPU_MemoryBuffer * pBuffer, LogicalDevice * pLogicalDevice, uint64_t Size, TargetMemoryType Type) =
		(TEXRESULT(*)(GPU_MemoryBuffer * pBuffer, LogicalDevice * pLogicalDevice, uint64_t Size, TargetMemoryType Type))GraphicsRes.pCreate_GPU_MemoryBuffer;

	return function(pBuffer, pLogicalDevice, Size, Type);
}
TEXRESULT Graphics_Ref_Resize_GPU_MemoryBuffer(GPU_MemoryBuffer* pBuffer, LogicalDevice* pLogicalDevice, uint64_t NewSize, TargetMemoryType Type)
{
	TEXRESULT(*function)(GPU_MemoryBuffer * pBuffer, LogicalDevice * pLogicalDevice, uint64_t NewSize, TargetMemoryType Type) =
		(TEXRESULT(*)(GPU_MemoryBuffer * pBuffer, LogicalDevice * pLogicalDevice, uint64_t NewSize, TargetMemoryType Type))GraphicsRes.pResize_GPU_MemoryBuffer;

	return function(pBuffer, pLogicalDevice, NewSize, Type);
}


GPU_Allocation Graphics_Ref_GPUmalloc(LogicalDevice* pLogicalDevice, VkMemoryRequirements MemoryRequirements, TargetMemoryType TargetMemory, AllocationType Type, uint32_t ThreadIndex)
{
	GPU_Allocation(*function)(LogicalDevice * pLogicalDevice, VkMemoryRequirements MemoryRequirements, TargetMemoryType TargetMemory, AllocationType Type, uint32_t ThreadIndex) =
		(GPU_Allocation(*)(LogicalDevice * pLogicalDevice, VkMemoryRequirements MemoryRequirements, TargetMemoryType TargetMemory, AllocationType Type, uint32_t ThreadIndex))GraphicsRes.pGPUmalloc;

	return function(pLogicalDevice, MemoryRequirements, TargetMemory, Type, ThreadIndex);
}

void Graphics_Ref_GPUfree(LogicalDevice* pLogicalDevice, GPU_Allocation* pAllocation)
{
	void (*function)(LogicalDevice * pLogicalDevice, GPU_Allocation* pAllocation) =
		(void(*)(LogicalDevice * pLogicalDevice, GPU_Allocation* pAllocation))GraphicsRes.pGPUfree;

	function(pLogicalDevice, pAllocation);
}
#endif




TEXRESULT Graphics_Convert_Ref_Add_XtoTEXIconverter(ConvertXtoTEXI* Converter, uint32_t Identifier)
{
	TEXRESULT(*function)(ConvertXtoTEXI * Converter, uint32_t Identifier) =
		(TEXRESULT(*)(ConvertXtoTEXI * Converter, uint32_t Identifier))GraphicsRes.pAdd_XtoTEXIconverter;

	return function(Converter, Identifier);
}

TEXRESULT Graphics_Convert_Ref_Add_TEXItoXconverter(ConvertTEXItoX* Converter, uint32_t Identifier)
{
	TEXRESULT(*function)(ConvertTEXItoX * Converter, uint32_t Identifier) =
		(TEXRESULT(*)(ConvertTEXItoX * Converter, uint32_t Identifier))GraphicsRes.pAdd_TEXItoXconverter;

	return function(Converter, Identifier);
}

TEXRESULT Graphics_Convert_Ref_Remove_XtoTEXIconverter(uint32_t Identifier)
{
	TEXRESULT(*function)(uint32_t Identifier) =
		(TEXRESULT(*)(uint32_t Identifier))GraphicsRes.pRemove_XtoTEXIconverter;

	return function(Identifier);
}

TEXRESULT Graphics_Convert_Ref_Remove_TEXItoXconverter(uint32_t Identifier)
{
	TEXRESULT(*function)(uint32_t Identifier) =
		(TEXRESULT(*)(uint32_t Identifier))GraphicsRes.pRemove_TEXItoXconverter;

	return function(Identifier);
}

TEXRESULT Graphics_Convert_Ref_XtoTEXI(FileData* Src, TEXI_HEADER** Dst, uint32_t Identifier)
{
	TEXRESULT(*function)(FileData * Src, TEXI_HEADER * *Dst, uint32_t Identifier) =
		(TEXRESULT(*)(FileData * Src, TEXI_HEADER * *Dst, uint32_t Identifier))GraphicsRes.pXtoTEXI;

	return function(Src, Dst, Identifier);
}

TEXRESULT Graphics_Convert_Ref_TEXItoX(TEXI_HEADER* Src, FileData* Dst, uint32_t Identifier)
{
	TEXRESULT(*function)(TEXI_HEADER * Src, FileData * Dst, uint32_t Identifier) =
		(TEXRESULT(*)(TEXI_HEADER * Src, FileData * Dst, uint32_t Identifier))GraphicsRes.pTEXItoX;

	return function(Src, Dst, Identifier);
}

TEXRESULT Graphics_Effects_Ref_Register_GraphicsEffectSignature(GraphicsEffectSignature* pSignature)
{
	TEXRESULT(*function)(GraphicsEffectSignature * pSignature) =
		(TEXRESULT(*)(GraphicsEffectSignature * pSignature))GraphicsRes.pRegister_GraphicsEffectSignature;

	return function(pSignature);
}

TEXRESULT Graphics_Effects_Ref_DeRegister_GraphicsEffectSignature(GraphicsEffectSignature* pSignature)
{
	TEXRESULT(*function)(GraphicsEffectSignature * pSignature) =
		(TEXRESULT(*)(GraphicsEffectSignature * pSignature))GraphicsRes.pDeRegister_GraphicsEffectSignature;

	return function(pSignature);
}

TEXRESULT Graphics_Effects_Ref_Find_GraphicsEffectSignature(GraphicsEffectIdentifier Identifier, GraphicsEffectSignature** ppSignature, GraphicsEffectBufferIndex* pBufferIndex)
{
	TEXRESULT(*function)(GraphicsEffectIdentifier Identifier, GraphicsEffectSignature * *ppSignature, GraphicsEffectBufferIndex * pBufferIndex) =
		(TEXRESULT(*)(GraphicsEffectIdentifier Identifier, GraphicsEffectSignature * *ppSignature, GraphicsEffectBufferIndex * pBufferIndex))GraphicsRes.pFind_GraphicsEffectSignature;

	return function(Identifier, ppSignature, pBufferIndex);
}

TEXRESULT Graphics_Effects_Ref_Get_GraphicsEffect(ElementGraphics* pElement, GraphicsEffectIdentifier Identifier, void** pReturnEffect)
{
	TEXRESULT(*function)(ElementGraphics* pElement, GraphicsEffectIdentifier Identifier, void** pReturnEffect) =
		(TEXRESULT(*)(ElementGraphics* pElement, GraphicsEffectIdentifier Identifier, void** pReturnEffect))GraphicsRes.pGet_GraphicsEffect;

	return function(pElement, Identifier, pReturnEffect);
}

TEXRESULT Graphics_Ref_Create_DummyTEXI(TEXI_HEADER** pDst, GraphicsFormat Format, uint64_t Width, uint64_t Height, uint64_t Depth, uint64_t MipmapCount, uint64_t InitialSize, uint64_t ImageSize)
{
	TEXRESULT(*function)(TEXI_HEADER * *pDst, GraphicsFormat Format, uint64_t Width, uint64_t Height, uint64_t Depth, uint64_t MipmapCount, uint64_t InitialSize, uint64_t ImageSize) =
		(TEXRESULT(*)(TEXI_HEADER * *pDst, GraphicsFormat Format, uint64_t Width, uint64_t Height, uint64_t Depth, uint64_t MipmapCount, uint64_t InitialSize, uint64_t ImageSize))GraphicsRes.pCreate_DummyTEXI;

	return function(pDst, Format, Width, Height, Depth, MipmapCount, InitialSize, ImageSize);
}

TEXRESULT Graphics_Ref_Create_ImageAtlas(TEXI_HEADER** pSrcImages, uint64_t pSrcImagesSize, TEXI_HEADER** ppDstImage)
{
	TEXRESULT(*function)(TEXI_HEADER * *pSrcImages, uint64_t pSrcImagesSize, TEXI_HEADER * *ppDstImage) =
		(TEXRESULT(*)(TEXI_HEADER * *pSrcImages, uint64_t pSrcImagesSize, TEXI_HEADER * *ppDstImage))GraphicsRes.pCreate_ImageAtlas;

	return function(pSrcImages, pSrcImagesSize, ppDstImage);
}

TEXRESULT Graphics_Ref_Convert_ImageData(TEXI_HEADER** src, GraphicsFormat dstformat)
{
	TEXRESULT(*function)(TEXI_HEADER * *src, GraphicsFormat dstformat) =
		(TEXRESULT(*)(TEXI_HEADER * *src, GraphicsFormat dstformat))GraphicsRes.pConvert_ImageData;

	return function(src, dstformat);
}
#ifdef TEX_EXPOSE_GRAPHICS
TEXRESULT Graphics_Ref_Update_Descriptor(LogicalDevice* pLogicalDevice, VkDescriptorSet Set, uint64_t Binding, uint64_t DstArrayElement, VkDescriptorType Type, VkDescriptorBufferInfo* pBufferInfo, VkDescriptorImageInfo* pImageInfo)
{
	TEXRESULT(*function)(LogicalDevice * pLogicalDevice, VkDescriptorSet Set, uint64_t Binding, uint64_t DstArrayElement, VkDescriptorType Type, VkDescriptorBufferInfo * pBufferInfo, VkDescriptorImageInfo * pImageInfo) =
		(TEXRESULT(*)(LogicalDevice * pLogicalDevice, VkDescriptorSet Set, uint64_t Binding, uint64_t DstArrayElement, VkDescriptorType Type, VkDescriptorBufferInfo * pBufferInfo, VkDescriptorImageInfo * pImageInfo))GraphicsRes.pUpdate_Descriptor;

	return function(pLogicalDevice, Set, Binding, DstArrayElement, Type, pBufferInfo, pImageInfo);
}

void Graphics_Ref_Destroy_GPU_Texture(LogicalDevice* pLogicalDevice, GPU_Texture* pGPU_Texture)
{
	void (*function)(LogicalDevice * pLogicalDevice, GPU_Texture * pGPU_Texture) =
		(void(*)(LogicalDevice * pLogicalDevice, GPU_Texture * pGPU_Texture))GraphicsRes.pDestroy_GPU_Texture;

	function(pLogicalDevice, pGPU_Texture);
}

void Graphics_Ref_Destroy_GPU_Buffer(LogicalDevice* pLogicalDevice, GPU_Buffer* pGPU_Buffer)
{
	void (*function)(LogicalDevice * pLogicalDevice, GPU_Buffer * pGPU_Buffer) =
		(void(*)(LogicalDevice * pLogicalDevice, GPU_Buffer * pGPU_Buffer))GraphicsRes.pDestroy_GPU_Buffer;

	function(pLogicalDevice, pGPU_Buffer);
}


uint64_t Graphics_Ref_Get_DeviceIndex(const LogicalDevice* pLogicalDevice)
{
	uint64_t(*function)(const LogicalDevice * pLogicalDevice) =
		(uint64_t(*)(const LogicalDevice * pLogicalDevice))GraphicsRes.pGet_DeviceIndex;

	return function(pLogicalDevice);
}
#endif

void Graphics_Ref_Destroy_SwapChain(RHeaderGraphicsWindow* pGraphicsWindow, bool FullDestruct)
{
	void (*function)(RHeaderGraphicsWindow * pGraphicsWindow, bool FullDestruct) =
		(void(*)(RHeaderGraphicsWindow * pGraphicsWindow, bool FullDestruct))GraphicsRes.pDestroy_SwapChain;

	function(pGraphicsWindow, FullDestruct);
}

TEXRESULT Graphics_Ref_ReCreate_SwapChain(RHeaderGraphicsWindow* pGraphicsWindow, bool FullDestruct)
{
	TEXRESULT(*function)(RHeaderGraphicsWindow * pGraphicsWindow, bool FullDestruct) =
		(TEXRESULT(*)(RHeaderGraphicsWindow * pGraphicsWindow, bool FullDestruct))GraphicsRes.pReCreate_SwapChain;

	return function(pGraphicsWindow, FullDestruct);
}


#define CompileVkShaderModule(LogicalDevice, VkShader, ShaderSource, ShaderSourceSize, FunctionName)\
{\
	VkShaderModuleCreateInfo Info;\
	memset(&Info, 0, sizeof(Info));\
	Info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;\
	Info.codeSize = ShaderSourceSize;\
	Info.pCode = ShaderSource;\
	Info.flags = NULL;\
	Info.pNext = NULL;\
	if ((res = vkCreateShaderModule(LogicalDevice->VkLogicalDevice, &Info, NULL, &VkShader)) != VK_SUCCESS){\
		Engine_Ref_FunctionError(FunctionName, "vkCreateShaderModule Failed, VkResult == ", res);\
		return;\
	}\
}\


